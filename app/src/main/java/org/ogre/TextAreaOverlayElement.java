/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class TextAreaOverlayElement extends OverlayElement {
  private transient long swigCPtr;

  protected TextAreaOverlayElement(long cPtr, boolean cMemoryOwn) {
    super(OgreOverlayJNI.TextAreaOverlayElement_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TextAreaOverlayElement obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreOverlayJNI.delete_TextAreaOverlayElement(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public TextAreaOverlayElement(String name) {
    this(OgreOverlayJNI.new_TextAreaOverlayElement(name), true);
  }

  public void initialise() {
    OgreOverlayJNI.TextAreaOverlayElement_initialise(swigCPtr, this);
  }

  public void _releaseManualHardwareResources() {
    OgreOverlayJNI.TextAreaOverlayElement__releaseManualHardwareResources(swigCPtr, this);
  }

  public void _restoreManualHardwareResources() {
    OgreOverlayJNI.TextAreaOverlayElement__restoreManualHardwareResources(swigCPtr, this);
  }

  public void setCaption(SWIGTYPE_p_UTFString text) {
    OgreOverlayJNI.TextAreaOverlayElement_setCaption(swigCPtr, this, SWIGTYPE_p_UTFString.getCPtr(text));
  }

  public void setCharHeight(float height) {
    OgreOverlayJNI.TextAreaOverlayElement_setCharHeight(swigCPtr, this, height);
  }

  public float getCharHeight() {
    return OgreOverlayJNI.TextAreaOverlayElement_getCharHeight(swigCPtr, this);
  }

  public void setSpaceWidth(float width) {
    OgreOverlayJNI.TextAreaOverlayElement_setSpaceWidth(swigCPtr, this, width);
  }

  public float getSpaceWidth() {
    return OgreOverlayJNI.TextAreaOverlayElement_getSpaceWidth(swigCPtr, this);
  }

  public void setFontName(String font, String group) {
    OgreOverlayJNI.TextAreaOverlayElement_setFontName__SWIG_0(swigCPtr, this, font, group);
  }

  public void setFontName(String font) {
    OgreOverlayJNI.TextAreaOverlayElement_setFontName__SWIG_1(swigCPtr, this, font);
  }

  public FontPtr getFont() {
    return new FontPtr(OgreOverlayJNI.TextAreaOverlayElement_getFont(swigCPtr, this), false);
  }

  public String getTypeName() {
    return OgreOverlayJNI.TextAreaOverlayElement_getTypeName(swigCPtr, this);
  }

  public MaterialPtr getMaterial() {
    return new MaterialPtr(OgreOverlayJNI.TextAreaOverlayElement_getMaterial(swigCPtr, this), false);
  }

  public void getRenderOperation(RenderOperation op) {
    OgreOverlayJNI.TextAreaOverlayElement_getRenderOperation(swigCPtr, this, RenderOperation.getCPtr(op), op);
  }

  public void setColour(ColourValue col) {
    OgreOverlayJNI.TextAreaOverlayElement_setColour(swigCPtr, this, ColourValue.getCPtr(col), col);
  }

  public ColourValue getColour() {
    return new ColourValue(OgreOverlayJNI.TextAreaOverlayElement_getColour(swigCPtr, this), false);
  }

  public void setColourBottom(ColourValue col) {
    OgreOverlayJNI.TextAreaOverlayElement_setColourBottom(swigCPtr, this, ColourValue.getCPtr(col), col);
  }

  public ColourValue getColourBottom() {
    return new ColourValue(OgreOverlayJNI.TextAreaOverlayElement_getColourBottom(swigCPtr, this), false);
  }

  public void setColourTop(ColourValue col) {
    OgreOverlayJNI.TextAreaOverlayElement_setColourTop(swigCPtr, this, ColourValue.getCPtr(col), col);
  }

  public ColourValue getColourTop() {
    return new ColourValue(OgreOverlayJNI.TextAreaOverlayElement_getColourTop(swigCPtr, this), false);
  }

  public void setAlignment(TextAreaOverlayElement.Alignment a) {
    OgreOverlayJNI.TextAreaOverlayElement_setAlignment(swigCPtr, this, a.swigValue());
  }

  public TextAreaOverlayElement.Alignment getAlignment() {
    return TextAreaOverlayElement.Alignment.swigToEnum(OgreOverlayJNI.TextAreaOverlayElement_getAlignment(swigCPtr, this));
  }

  public void setMetricsMode(GuiMetricsMode gmm) {
    OgreOverlayJNI.TextAreaOverlayElement_setMetricsMode(swigCPtr, this, gmm.swigValue());
  }

  public void _update() {
    OgreOverlayJNI.TextAreaOverlayElement__update(swigCPtr, this);
  }

  public enum Alignment {
    Left,
    Right,
    Center;

    public final int swigValue() {
      return swigValue;
    }

    public static Alignment swigToEnum(int swigValue) {
      Alignment[] swigValues = Alignment.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Alignment swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Alignment.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Alignment() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Alignment(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Alignment(Alignment swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
