/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class FFPColour extends SubRenderState {
  private transient long swigCPtr;

  protected FFPColour(long cPtr, boolean cMemoryOwn) {
    super(RTShaderJNI.FFPColour_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FFPColour obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTShaderJNI.delete_FFPColour(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public FFPColour() {
    this(RTShaderJNI.new_FFPColour(), true);
  }

  public int getExecutionOrder() {
    return RTShaderJNI.FFPColour_getExecutionOrder(swigCPtr, this);
  }

  public void copyFrom(SubRenderState rhs) {
    RTShaderJNI.FFPColour_copyFrom(swigCPtr, this, SubRenderState.getCPtr(rhs), rhs);
  }

  public boolean preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    return RTShaderJNI.FFPColour_preAddToRenderState(swigCPtr, this, RenderState.getCPtr(renderState), renderState, Pass.getCPtr(srcPass), srcPass, Pass.getCPtr(dstPass), dstPass);
  }

  public void setResolveStageFlags(long flags) {
    RTShaderJNI.FFPColour_setResolveStageFlags(swigCPtr, this, flags);
  }

  public long getResolveStageFlags() {
    return RTShaderJNI.FFPColour_getResolveStageFlags(swigCPtr, this);
  }

  public void addResolveStageMask(long mask) {
    RTShaderJNI.FFPColour_addResolveStageMask(swigCPtr, this, mask);
  }

  public void removeResolveStageMask(long mask) {
    RTShaderJNI.FFPColour_removeResolveStageMask(swigCPtr, this, mask);
  }

  public static void setType(String value) {
    RTShaderJNI.FFPColour_Type_set(value);
  }

  public static String getType() {
    return RTShaderJNI.FFPColour_Type_get();
  }

  public enum StageFlags {
    SF_VS_INPUT_DIFFUSE(RTShaderJNI.FFPColour_SF_VS_INPUT_DIFFUSE_get()),
    SF_VS_OUTPUT_DIFFUSE(RTShaderJNI.FFPColour_SF_VS_OUTPUT_DIFFUSE_get()),
    SF_VS_OUTPUT_SPECULAR(RTShaderJNI.FFPColour_SF_VS_OUTPUT_SPECULAR_get()),
    SF_PS_INPUT_DIFFUSE(RTShaderJNI.FFPColour_SF_PS_INPUT_DIFFUSE_get()),
    SF_PS_INPUT_SPECULAR(RTShaderJNI.FFPColour_SF_PS_INPUT_SPECULAR_get());

    public final int swigValue() {
      return swigValue;
    }

    public static StageFlags swigToEnum(int swigValue) {
      StageFlags[] swigValues = StageFlags.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (StageFlags swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + StageFlags.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private StageFlags() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private StageFlags(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private StageFlags(StageFlags swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
