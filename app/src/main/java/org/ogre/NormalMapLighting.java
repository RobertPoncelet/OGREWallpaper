/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class NormalMapLighting extends PerPixelLighting {
  private transient long swigCPtr;

  protected NormalMapLighting(long cPtr, boolean cMemoryOwn) {
    super(RTShaderJNI.NormalMapLighting_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NormalMapLighting obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTShaderJNI.delete_NormalMapLighting(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public NormalMapLighting() {
    this(RTShaderJNI.new_NormalMapLighting(), true);
  }

  public void updateGpuProgramsParams(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t pLightList) {
    RTShaderJNI.NormalMapLighting_updateGpuProgramsParams(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(pLightList));
  }

  public void copyFrom(SubRenderState rhs) {
    RTShaderJNI.NormalMapLighting_copyFrom(swigCPtr, this, SubRenderState.getCPtr(rhs), rhs);
  }

  public boolean preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    return RTShaderJNI.NormalMapLighting_preAddToRenderState(swigCPtr, this, RenderState.getCPtr(renderState), renderState, Pass.getCPtr(srcPass), srcPass, Pass.getCPtr(dstPass), dstPass);
  }

  public void setTexCoordIndex(long index) {
    RTShaderJNI.NormalMapLighting_setTexCoordIndex(swigCPtr, this, index);
  }

  public long getTexCoordIndex() {
    return RTShaderJNI.NormalMapLighting_getTexCoordIndex(swigCPtr, this);
  }

  public static void setType(String value) {
    RTShaderJNI.NormalMapLighting_Type_set(value);
  }

  public static String getType() {
    return RTShaderJNI.NormalMapLighting_Type_get();
  }

  public void setNormalMapSpace(NormalMapLighting.NormalMapSpace normalMapSpace) {
    RTShaderJNI.NormalMapLighting_setNormalMapSpace(swigCPtr, this, normalMapSpace.swigValue());
  }

  public NormalMapLighting.NormalMapSpace getNormalMapSpace() {
    return NormalMapLighting.NormalMapSpace.swigToEnum(RTShaderJNI.NormalMapLighting_getNormalMapSpace(swigCPtr, this));
  }

  public void setNormalMapTextureName(String textureName) {
    RTShaderJNI.NormalMapLighting_setNormalMapTextureName(swigCPtr, this, textureName);
  }

  public String getNormalMapTextureName() {
    return RTShaderJNI.NormalMapLighting_getNormalMapTextureName(swigCPtr, this);
  }

  public void setNormalMapFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    RTShaderJNI.NormalMapLighting_setNormalMapFiltering(swigCPtr, this, minFilter.swigValue(), magFilter.swigValue(), mipFilter.swigValue());
  }

  public void setNormalMapAnisotropy(long anisotropy) {
    RTShaderJNI.NormalMapLighting_setNormalMapAnisotropy(swigCPtr, this, anisotropy);
  }

  public void setNormalMapMipBias(float mipBias) {
    RTShaderJNI.NormalMapLighting_setNormalMapMipBias(swigCPtr, this, mipBias);
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t getNormalMapSampler() {
    return new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(RTShaderJNI.NormalMapLighting_getNormalMapSampler(swigCPtr, this), false);
  }

  public void setNormalMapSampler(SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t sampler) {
    RTShaderJNI.NormalMapLighting_setNormalMapSampler(swigCPtr, this, SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t.getCPtr(sampler));
  }

  public enum NormalMapSpace {
    NMS_OBJECT(RTShaderJNI.NormalMapLighting_NMS_OBJECT_get()),
    NMS_TANGENT(RTShaderJNI.NormalMapLighting_NMS_TANGENT_get()),
    NMS_PARALLAX(RTShaderJNI.NormalMapLighting_NMS_PARALLAX_get());

    public final int swigValue() {
      return swigValue;
    }

    public static NormalMapSpace swigToEnum(int swigValue) {
      NormalMapSpace[] swigValues = NormalMapSpace.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (NormalMapSpace swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + NormalMapSpace.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private NormalMapSpace() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private NormalMapSpace(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private NormalMapSpace(NormalMapSpace swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
