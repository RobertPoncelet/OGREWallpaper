/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class RenderTargetListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RenderTargetListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RenderTargetListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_RenderTargetListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    OgreJNI.RenderTargetListener_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    OgreJNI.RenderTargetListener_change_ownership(this, swigCPtr, true);
  }

  public void preRenderTargetUpdate(RenderTargetEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_preRenderTargetUpdate(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_preRenderTargetUpdateSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt);
  }

  public void postRenderTargetUpdate(RenderTargetEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_postRenderTargetUpdate(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_postRenderTargetUpdateSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt);
  }

  public void preViewportUpdate(RenderTargetViewportEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_preViewportUpdate(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_preViewportUpdateSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public void postViewportUpdate(RenderTargetViewportEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_postViewportUpdate(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_postViewportUpdateSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public void viewportAdded(RenderTargetViewportEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_viewportAdded(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_viewportAddedSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public void viewportRemoved(RenderTargetViewportEvent evt) {
    if (getClass() == RenderTargetListener.class) OgreJNI.RenderTargetListener_viewportRemoved(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt); else OgreJNI.RenderTargetListener_viewportRemovedSwigExplicitRenderTargetListener(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public RenderTargetListener() {
    this(OgreJNI.new_RenderTargetListener(), true);
    OgreJNI.RenderTargetListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
