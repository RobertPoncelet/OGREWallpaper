/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class PatchSurface {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PatchSurface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PatchSurface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_PatchSurface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PatchSurface() {
    this(OgreJNI.new_PatchSurface(), true);
  }

  public void defineSurface(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, PatchSurface.PatchSurfaceType pType, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgreJNI.PatchSurface_defineSurface__SWIG_0(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, pType.swigValue(), uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue());
  }

  public void defineSurface(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, PatchSurface.PatchSurfaceType pType, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel) {
    OgreJNI.PatchSurface_defineSurface__SWIG_1(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, pType.swigValue(), uMaxSubdivisionLevel, vMaxSubdivisionLevel);
  }

  public void defineSurface(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, PatchSurface.PatchSurfaceType pType, long uMaxSubdivisionLevel) {
    OgreJNI.PatchSurface_defineSurface__SWIG_2(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, pType.swigValue(), uMaxSubdivisionLevel);
  }

  public void defineSurface(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, PatchSurface.PatchSurfaceType pType) {
    OgreJNI.PatchSurface_defineSurface__SWIG_3(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, pType.swigValue());
  }

  public void defineSurface(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height) {
    OgreJNI.PatchSurface_defineSurface__SWIG_4(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height);
  }

  public long getRequiredVertexCount() {
    return OgreJNI.PatchSurface_getRequiredVertexCount(swigCPtr, this);
  }

  public long getRequiredIndexCount() {
    return OgreJNI.PatchSurface_getRequiredIndexCount(swigCPtr, this);
  }

  public long getCurrentIndexCount() {
    return OgreJNI.PatchSurface_getCurrentIndexCount(swigCPtr, this);
  }

  public long getIndexOffset() {
    return OgreJNI.PatchSurface_getIndexOffset(swigCPtr, this);
  }

  public long getVertexOffset() {
    return OgreJNI.PatchSurface_getVertexOffset(swigCPtr, this);
  }

  public AxisAlignedBox getBounds() {
    return new AxisAlignedBox(OgreJNI.PatchSurface_getBounds(swigCPtr, this), false);
  }

  public float getBoundingSphereRadius() {
    return OgreJNI.PatchSurface_getBoundingSphereRadius(swigCPtr, this);
  }

  public void build(HardwareVertexBufferPtr destVertexBuffer, long vertexStart, HardwareIndexBufferPtr destIndexBuffer, long indexStart) {
    OgreJNI.PatchSurface_build(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(destVertexBuffer), destVertexBuffer, vertexStart, HardwareIndexBufferPtr.getCPtr(destIndexBuffer), destIndexBuffer, indexStart);
  }

  public void setSubdivisionFactor(float factor) {
    OgreJNI.PatchSurface_setSubdivisionFactor(swigCPtr, this, factor);
  }

  public float getSubdivisionFactor() {
    return OgreJNI.PatchSurface_getSubdivisionFactor(swigCPtr, this);
  }

  public SWIGTYPE_p_void getControlPointBuffer() {
    long cPtr = OgreJNI.PatchSurface_getControlPointBuffer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void notifyControlPointBufferDeallocated() {
    OgreJNI.PatchSurface_notifyControlPointBufferDeallocated(swigCPtr, this);
  }

  public enum PatchSurfaceType {
    PST_BEZIER;

    public final int swigValue() {
      return swigValue;
    }

    public static PatchSurfaceType swigToEnum(int swigValue) {
      PatchSurfaceType[] swigValues = PatchSurfaceType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (PatchSurfaceType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + PatchSurfaceType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private PatchSurfaceType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private PatchSurfaceType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private PatchSurfaceType(PatchSurfaceType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public final static int AUTO_LEVEL = OgreJNI.PatchSurface_AUTO_LEVEL_get();

  public enum VisibleSide {
    VS_FRONT,
    VS_BACK,
    VS_BOTH;

    public final int swigValue() {
      return swigValue;
    }

    public static VisibleSide swigToEnum(int swigValue) {
      VisibleSide[] swigValues = VisibleSide.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (VisibleSide swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + VisibleSide.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private VisibleSide() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private VisibleSide(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private VisibleSide(VisibleSide swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
