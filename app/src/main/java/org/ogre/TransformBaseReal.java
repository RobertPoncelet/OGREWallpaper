/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class TransformBaseReal {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TransformBaseReal(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TransformBaseReal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_TransformBaseReal(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TransformBaseReal() {
    this(OgreJNI.new_TransformBaseReal(), true);
  }

  public void makeTrans(Vector3 v) {
    OgreJNI.TransformBaseReal_makeTrans__SWIG_0(swigCPtr, this, Vector3.getCPtr(v), v);
  }

  public void makeTrans(float tx, float ty, float tz) {
    OgreJNI.TransformBaseReal_makeTrans__SWIG_1(swigCPtr, this, tx, ty, tz);
  }

  public void set3x3Matrix(Matrix3 mat3) {
    OgreJNI.TransformBaseReal_set3x3Matrix(swigCPtr, this, Matrix3.getCPtr(mat3), mat3);
  }

  public Matrix3 linear() {
    return new Matrix3(OgreJNI.TransformBaseReal_linear(swigCPtr, this), true);
  }

  public float determinant() {
    return OgreJNI.TransformBaseReal_determinant(swigCPtr, this);
  }

  public Matrix4 transpose() {
    return new Matrix4(OgreJNI.TransformBaseReal_transpose(swigCPtr, this), true);
  }

  public void makeTransform(Vector3 position, Vector3 scale, Quaternion orientation) {
    OgreJNI.TransformBaseReal_makeTransform(swigCPtr, this, Vector3.getCPtr(position), position, Vector3.getCPtr(scale), scale, Quaternion.getCPtr(orientation), orientation);
  }

  public void makeInverseTransform(Vector3 position, Vector3 scale, Quaternion orientation) {
    OgreJNI.TransformBaseReal_makeInverseTransform(swigCPtr, this, Vector3.getCPtr(position), position, Vector3.getCPtr(scale), scale, Quaternion.getCPtr(orientation), orientation);
  }

}
