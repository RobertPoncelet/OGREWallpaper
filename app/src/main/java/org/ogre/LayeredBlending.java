/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class LayeredBlending extends FFPTexturing {
  private transient long swigCPtr;

  protected LayeredBlending(long cPtr, boolean cMemoryOwn) {
    super(RTShaderJNI.LayeredBlending_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LayeredBlending obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTShaderJNI.delete_LayeredBlending(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class TextureBlend {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected TextureBlend(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(TextureBlend obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderJNI.delete_LayeredBlending_TextureBlend(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public TextureBlend() {
      this(RTShaderJNI.new_LayeredBlending_TextureBlend(), true);
    }
  
    public void setBlendMode(LayeredBlending.BlendMode value) {
      RTShaderJNI.LayeredBlending_TextureBlend_blendMode_set(swigCPtr, this, value.swigValue());
    }
  
    public LayeredBlending.BlendMode getBlendMode() {
      return LayeredBlending.BlendMode.swigToEnum(RTShaderJNI.LayeredBlending_TextureBlend_blendMode_get(swigCPtr, this));
    }
  
    public void setSourceModifier(LayeredBlending.SourceModifier value) {
      RTShaderJNI.LayeredBlending_TextureBlend_sourceModifier_set(swigCPtr, this, value.swigValue());
    }
  
    public LayeredBlending.SourceModifier getSourceModifier() {
      return LayeredBlending.SourceModifier.swigToEnum(RTShaderJNI.LayeredBlending_TextureBlend_sourceModifier_get(swigCPtr, this));
    }
  
    public void setCustomNum(int value) {
      RTShaderJNI.LayeredBlending_TextureBlend_customNum_set(swigCPtr, this, value);
    }
  
    public int getCustomNum() {
      return RTShaderJNI.LayeredBlending_TextureBlend_customNum_get(swigCPtr, this);
    }
  
    public void setModControlParam(SWIGTYPE_p_std__shared_ptrT_Ogre__RTShader__Parameter_t value) {
      RTShaderJNI.LayeredBlending_TextureBlend_modControlParam_set(swigCPtr, this, SWIGTYPE_p_std__shared_ptrT_Ogre__RTShader__Parameter_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_std__shared_ptrT_Ogre__RTShader__Parameter_t getModControlParam() {
      long cPtr = RTShaderJNI.LayeredBlending_TextureBlend_modControlParam_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_std__shared_ptrT_Ogre__RTShader__Parameter_t(cPtr, false);
    }
  
  }

  public LayeredBlending() {
    this(RTShaderJNI.new_LayeredBlending(), true);
  }

  public void setBlendMode(int index, LayeredBlending.BlendMode mode) {
    RTShaderJNI.LayeredBlending_setBlendMode(swigCPtr, this, index, mode.swigValue());
  }

  public LayeredBlending.BlendMode getBlendMode(int index) {
    return LayeredBlending.BlendMode.swigToEnum(RTShaderJNI.LayeredBlending_getBlendMode(swigCPtr, this, index));
  }

  public void setSourceModifier(int index, LayeredBlending.SourceModifier modType, int customNum) {
    RTShaderJNI.LayeredBlending_setSourceModifier(swigCPtr, this, index, modType.swigValue(), customNum);
  }

  public boolean getSourceModifier(int index, SWIGTYPE_p_Ogre__RTShader__LayeredBlending__SourceModifier modType, SWIGTYPE_p_int customNum) {
    return RTShaderJNI.LayeredBlending_getSourceModifier(swigCPtr, this, index, SWIGTYPE_p_Ogre__RTShader__LayeredBlending__SourceModifier.getCPtr(modType), SWIGTYPE_p_int.getCPtr(customNum));
  }

  public void copyFrom(SubRenderState rhs) {
    RTShaderJNI.LayeredBlending_copyFrom(swigCPtr, this, SubRenderState.getCPtr(rhs), rhs);
  }

  public static void setType(String value) {
    RTShaderJNI.LayeredBlending_Type_set(value);
  }

  public static String getType() {
    return RTShaderJNI.LayeredBlending_Type_get();
  }

  public enum BlendMode {
    LB_Invalid(RTShaderJNI.LayeredBlending_LB_Invalid_get()),
    LB_FFPBlend,
    LB_BlendNormal,
    LB_BlendLighten,
    LB_BlendDarken,
    LB_BlendMultiply,
    LB_BlendAverage,
    LB_BlendAdd,
    LB_BlendSubtract,
    LB_BlendDifference,
    LB_BlendNegation,
    LB_BlendExclusion,
    LB_BlendScreen,
    LB_BlendOverlay,
    LB_BlendSoftLight,
    LB_BlendHardLight,
    LB_BlendColorDodge,
    LB_BlendColorBurn,
    LB_BlendLinearDodge,
    LB_BlendLinearBurn,
    LB_BlendLinearLight,
    LB_BlendVividLight,
    LB_BlendPinLight,
    LB_BlendHardMix,
    LB_BlendReflect,
    LB_BlendGlow,
    LB_BlendPhoenix,
    LB_BlendSaturation,
    LB_BlendColor,
    LB_BlendLuminosity,
    LB_MaxBlendModes;

    public final int swigValue() {
      return swigValue;
    }

    public static BlendMode swigToEnum(int swigValue) {
      BlendMode[] swigValues = BlendMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (BlendMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + BlendMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private BlendMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private BlendMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private BlendMode(BlendMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum SourceModifier {
    SM_Invalid(RTShaderJNI.LayeredBlending_SM_Invalid_get()),
    SM_None,
    SM_Source1Modulate,
    SM_Source2Modulate,
    SM_Source1InvModulate,
    SM_Source2InvModulate,
    SM_MaxSourceModifiers;

    public final int swigValue() {
      return swigValue;
    }

    public static SourceModifier swigToEnum(int swigValue) {
      SourceModifier[] swigValues = SourceModifier.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (SourceModifier swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + SourceModifier.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private SourceModifier() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private SourceModifier(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private SourceModifier(SourceModifier swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
