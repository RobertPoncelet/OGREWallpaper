/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class HardwareSkinningFactory extends SubRenderStateFactory {
  private transient long swigCPtr;

  protected HardwareSkinningFactory(long cPtr, boolean cMemoryOwn) {
    super(RTShaderJNI.HardwareSkinningFactory_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HardwareSkinningFactory obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTShaderJNI.delete_HardwareSkinningFactory(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public HardwareSkinningFactory() {
    this(RTShaderJNI.new_HardwareSkinningFactory(), true);
  }

  public SubRenderState createInstance(ScriptCompiler compiler, PropertyAbstractNode prop, Pass pass, SGScriptTranslator translator) {
    long cPtr = RTShaderJNI.HardwareSkinningFactory_createInstance(swigCPtr, this, ScriptCompiler.getCPtr(compiler), compiler, PropertyAbstractNode.getCPtr(prop), prop, Pass.getCPtr(pass), pass, SGScriptTranslator.getCPtr(translator), translator);
    return (cPtr == 0) ? null : new SubRenderState(cPtr, false);
  }

  public void writeInstance(MaterialSerializer ser, SubRenderState subRenderState, Pass srcPass, Pass dstPass) {
    RTShaderJNI.HardwareSkinningFactory_writeInstance(swigCPtr, this, MaterialSerializer.getCPtr(ser), ser, SubRenderState.getCPtr(subRenderState), subRenderState, Pass.getCPtr(srcPass), srcPass, Pass.getCPtr(dstPass), dstPass);
  }

  public void setCustomShadowCasterMaterials(SkinningType skinningType, MaterialPtr caster1Weight, MaterialPtr caster2Weight, MaterialPtr caster3Weight, MaterialPtr caster4Weight) {
    RTShaderJNI.HardwareSkinningFactory_setCustomShadowCasterMaterials(swigCPtr, this, skinningType.swigValue(), MaterialPtr.getCPtr(caster1Weight), caster1Weight, MaterialPtr.getCPtr(caster2Weight), caster2Weight, MaterialPtr.getCPtr(caster3Weight), caster3Weight, MaterialPtr.getCPtr(caster4Weight), caster4Weight);
  }

  public void setCustomShadowReceiverMaterials(SkinningType skinningType, MaterialPtr receiver1Weight, MaterialPtr receiver2Weight, MaterialPtr receiver3Weight, MaterialPtr receiver4Weight) {
    RTShaderJNI.HardwareSkinningFactory_setCustomShadowReceiverMaterials(swigCPtr, this, skinningType.swigValue(), MaterialPtr.getCPtr(receiver1Weight), receiver1Weight, MaterialPtr.getCPtr(receiver2Weight), receiver2Weight, MaterialPtr.getCPtr(receiver3Weight), receiver3Weight, MaterialPtr.getCPtr(receiver4Weight), receiver4Weight);
  }

  public MaterialPtr getCustomShadowCasterMaterial(SkinningType skinningType, int index) {
    return new MaterialPtr(RTShaderJNI.HardwareSkinningFactory_getCustomShadowCasterMaterial(swigCPtr, this, skinningType.swigValue(), index), false);
  }

  public MaterialPtr getCustomShadowReceiverMaterial(SkinningType skinningType, int index) {
    return new MaterialPtr(RTShaderJNI.HardwareSkinningFactory_getCustomShadowReceiverMaterial(swigCPtr, this, skinningType.swigValue(), index), false);
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType, boolean correctAntidpodalityHandling, boolean shearScale) {
    RTShaderJNI.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_0(swigCPtr, this, Entity.getCPtr(pEntity), pEntity, skinningType.swigValue(), correctAntidpodalityHandling, shearScale);
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType, boolean correctAntidpodalityHandling) {
    RTShaderJNI.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_1(swigCPtr, this, Entity.getCPtr(pEntity), pEntity, skinningType.swigValue(), correctAntidpodalityHandling);
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType) {
    RTShaderJNI.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_2(swigCPtr, this, Entity.getCPtr(pEntity), pEntity, skinningType.swigValue());
  }

  public void prepareEntityForSkinning(Entity pEntity) {
    RTShaderJNI.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_3(swigCPtr, this, Entity.getCPtr(pEntity), pEntity);
  }

  public int getMaxCalculableBoneCount() {
    return RTShaderJNI.HardwareSkinningFactory_getMaxCalculableBoneCount(swigCPtr, this);
  }

  public void setMaxCalculableBoneCount(int count) {
    RTShaderJNI.HardwareSkinningFactory_setMaxCalculableBoneCount(swigCPtr, this, count);
  }

  public static HardwareSkinningFactory getSingleton() {
    return new HardwareSkinningFactory(RTShaderJNI.HardwareSkinningFactory_getSingleton(), false);
  }

}
