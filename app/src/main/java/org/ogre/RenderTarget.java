/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class RenderTarget {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RenderTarget(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RenderTarget obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_RenderTarget(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public String getName() {
    return OgreJNI.RenderTarget_getName(swigCPtr, this);
  }

  public void getMetrics(SWIGTYPE_p_unsigned_int width, SWIGTYPE_p_unsigned_int height, SWIGTYPE_p_unsigned_int colourDepth) {
    OgreJNI.RenderTarget_getMetrics(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(width), SWIGTYPE_p_unsigned_int.getCPtr(height), SWIGTYPE_p_unsigned_int.getCPtr(colourDepth));
  }

  public long getWidth() {
    return OgreJNI.RenderTarget_getWidth(swigCPtr, this);
  }

  public long getHeight() {
    return OgreJNI.RenderTarget_getHeight(swigCPtr, this);
  }

  public long getColourDepth() {
    return OgreJNI.RenderTarget_getColourDepth(swigCPtr, this);
  }

  public void setDepthBufferPool(int poolId) {
    OgreJNI.RenderTarget_setDepthBufferPool(swigCPtr, this, poolId);
  }

  public int getDepthBufferPool() {
    return OgreJNI.RenderTarget_getDepthBufferPool(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__DepthBuffer getDepthBuffer() {
    long cPtr = OgreJNI.RenderTarget_getDepthBuffer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__DepthBuffer(cPtr, false);
  }

  public boolean attachDepthBuffer(SWIGTYPE_p_Ogre__DepthBuffer depthBuffer) {
    return OgreJNI.RenderTarget_attachDepthBuffer(swigCPtr, this, SWIGTYPE_p_Ogre__DepthBuffer.getCPtr(depthBuffer));
  }

  public void detachDepthBuffer() {
    OgreJNI.RenderTarget_detachDepthBuffer(swigCPtr, this);
  }

  public void _detachDepthBuffer() {
    OgreJNI.RenderTarget__detachDepthBuffer(swigCPtr, this);
  }

  public void update(boolean swapBuffers) {
    OgreJNI.RenderTarget_update__SWIG_0(swigCPtr, this, swapBuffers);
  }

  public void update() {
    OgreJNI.RenderTarget_update__SWIG_1(swigCPtr, this);
  }

  public void swapBuffers() {
    OgreJNI.RenderTarget_swapBuffers(swigCPtr, this);
  }

  public Viewport addViewport(Camera cam, int ZOrder, float left, float top, float width, float height) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_0(swigCPtr, this, Camera.getCPtr(cam), cam, ZOrder, left, top, width, height);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport addViewport(Camera cam, int ZOrder, float left, float top, float width) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_1(swigCPtr, this, Camera.getCPtr(cam), cam, ZOrder, left, top, width);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport addViewport(Camera cam, int ZOrder, float left, float top) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_2(swigCPtr, this, Camera.getCPtr(cam), cam, ZOrder, left, top);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport addViewport(Camera cam, int ZOrder, float left) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_3(swigCPtr, this, Camera.getCPtr(cam), cam, ZOrder, left);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport addViewport(Camera cam, int ZOrder) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_4(swigCPtr, this, Camera.getCPtr(cam), cam, ZOrder);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport addViewport(Camera cam) {
    long cPtr = OgreJNI.RenderTarget_addViewport__SWIG_5(swigCPtr, this, Camera.getCPtr(cam), cam);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public int getNumViewports() {
    return OgreJNI.RenderTarget_getNumViewports(swigCPtr, this);
  }

  public Viewport getViewport(int index) {
    long cPtr = OgreJNI.RenderTarget_getViewport(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public Viewport getViewportByZOrder(int ZOrder) {
    long cPtr = OgreJNI.RenderTarget_getViewportByZOrder(swigCPtr, this, ZOrder);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public boolean hasViewportWithZOrder(int ZOrder) {
    return OgreJNI.RenderTarget_hasViewportWithZOrder(swigCPtr, this, ZOrder);
  }

  public void removeViewport(int ZOrder) {
    OgreJNI.RenderTarget_removeViewport(swigCPtr, this, ZOrder);
  }

  public void removeAllViewports() {
    OgreJNI.RenderTarget_removeAllViewports(swigCPtr, this);
  }

  public FrameStats getStatistics() {
    return new FrameStats(OgreJNI.RenderTarget_getStatistics(swigCPtr, this), false);
  }

  public void resetStatistics() {
    OgreJNI.RenderTarget_resetStatistics(swigCPtr, this);
  }

  public void getCustomAttribute(String name, SWIGTYPE_p_void pData) {
    OgreJNI.RenderTarget_getCustomAttribute__SWIG_0(swigCPtr, this, name, SWIGTYPE_p_void.getCPtr(pData));
  }

  public long getCustomAttribute(String name) {
    return OgreJNI.RenderTarget_getCustomAttribute__SWIG_1(swigCPtr, this, name);
  }

  public void addListener(RenderTargetListener listener) {
    OgreJNI.RenderTarget_addListener(swigCPtr, this, RenderTargetListener.getCPtr(listener), listener);
  }

  public void insertListener(RenderTargetListener listener, long pos) {
    OgreJNI.RenderTarget_insertListener__SWIG_0(swigCPtr, this, RenderTargetListener.getCPtr(listener), listener, pos);
  }

  public void insertListener(RenderTargetListener listener) {
    OgreJNI.RenderTarget_insertListener__SWIG_1(swigCPtr, this, RenderTargetListener.getCPtr(listener), listener);
  }

  public void removeListener(RenderTargetListener listener) {
    OgreJNI.RenderTarget_removeListener(swigCPtr, this, RenderTargetListener.getCPtr(listener), listener);
  }

  public void removeAllListeners() {
    OgreJNI.RenderTarget_removeAllListeners(swigCPtr, this);
  }

  public void setPriority(short priority) {
    OgreJNI.RenderTarget_setPriority(swigCPtr, this, priority);
  }

  public short getPriority() {
    return OgreJNI.RenderTarget_getPriority(swigCPtr, this);
  }

  public boolean isActive() {
    return OgreJNI.RenderTarget_isActive(swigCPtr, this);
  }

  public void setActive(boolean state) {
    OgreJNI.RenderTarget_setActive(swigCPtr, this, state);
  }

  public void setAutoUpdated(boolean autoupdate) {
    OgreJNI.RenderTarget_setAutoUpdated(swigCPtr, this, autoupdate);
  }

  public boolean isAutoUpdated() {
    return OgreJNI.RenderTarget_isAutoUpdated(swigCPtr, this);
  }

  public void copyContentsToMemory(Box src, PixelBox dst, RenderTarget.FrameBuffer buffer) {
    OgreJNI.RenderTarget_copyContentsToMemory__SWIG_0(swigCPtr, this, Box.getCPtr(src), src, PixelBox.getCPtr(dst), dst, buffer.swigValue());
  }

  public void copyContentsToMemory(Box src, PixelBox dst) {
    OgreJNI.RenderTarget_copyContentsToMemory__SWIG_1(swigCPtr, this, Box.getCPtr(src), src, PixelBox.getCPtr(dst), dst);
  }

  public PixelFormat suggestPixelFormat() {
    return PixelFormat.swigToEnum(OgreJNI.RenderTarget_suggestPixelFormat(swigCPtr, this));
  }

  public void writeContentsToFile(String filename) {
    OgreJNI.RenderTarget_writeContentsToFile(swigCPtr, this, filename);
  }

  public String writeContentsToTimestampedFile(String filenamePrefix, String filenameSuffix) {
    return OgreJNI.RenderTarget_writeContentsToTimestampedFile(swigCPtr, this, filenamePrefix, filenameSuffix);
  }

  public boolean requiresTextureFlipping() {
    return OgreJNI.RenderTarget_requiresTextureFlipping(swigCPtr, this);
  }

  public void _notifyCameraRemoved(Camera cam) {
    OgreJNI.RenderTarget__notifyCameraRemoved(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public boolean isPrimary() {
    return OgreJNI.RenderTarget_isPrimary(swigCPtr, this);
  }

  public boolean isStereoEnabled() {
    return OgreJNI.RenderTarget_isStereoEnabled(swigCPtr, this);
  }

  public boolean isHardwareGammaEnabled() {
    return OgreJNI.RenderTarget_isHardwareGammaEnabled(swigCPtr, this);
  }

  public long getFSAA() {
    return OgreJNI.RenderTarget_getFSAA(swigCPtr, this);
  }

  public String getFSAAHint() {
    return OgreJNI.RenderTarget_getFSAAHint(swigCPtr, this);
  }

  public void setFSAA(long fsaa, String fsaaHint) {
    OgreJNI.RenderTarget_setFSAA(swigCPtr, this, fsaa, fsaaHint);
  }

  static public class Impl {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Impl(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Impl obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public Impl() {
      this(OgreJNI.new_RenderTarget_Impl(), true);
    }
  
  }

  public RenderTarget.Impl _getImpl() {
    long cPtr = OgreJNI.RenderTarget__getImpl(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderTarget.Impl(cPtr, false);
  }

  public void _beginUpdate() {
    OgreJNI.RenderTarget__beginUpdate(swigCPtr, this);
  }

  public void _updateViewport(int zorder, boolean updateStatistics) {
    OgreJNI.RenderTarget__updateViewport__SWIG_0(swigCPtr, this, zorder, updateStatistics);
  }

  public void _updateViewport(int zorder) {
    OgreJNI.RenderTarget__updateViewport__SWIG_1(swigCPtr, this, zorder);
  }

  public void _updateViewport(Viewport viewport, boolean updateStatistics) {
    OgreJNI.RenderTarget__updateViewport__SWIG_2(swigCPtr, this, Viewport.getCPtr(viewport), viewport, updateStatistics);
  }

  public void _updateViewport(Viewport viewport) {
    OgreJNI.RenderTarget__updateViewport__SWIG_3(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
  }

  public void _updateAutoUpdatedViewports(boolean updateStatistics) {
    OgreJNI.RenderTarget__updateAutoUpdatedViewports__SWIG_0(swigCPtr, this, updateStatistics);
  }

  public void _updateAutoUpdatedViewports() {
    OgreJNI.RenderTarget__updateAutoUpdatedViewports__SWIG_1(swigCPtr, this);
  }

  public void _endUpdate() {
    OgreJNI.RenderTarget__endUpdate(swigCPtr, this);
  }

  public enum StatFlags {
    SF_NONE(OgreJNI.RenderTarget_SF_NONE_get()),
    SF_FPS(OgreJNI.RenderTarget_SF_FPS_get()),
    SF_AVG_FPS(OgreJNI.RenderTarget_SF_AVG_FPS_get()),
    SF_BEST_FPS(OgreJNI.RenderTarget_SF_BEST_FPS_get()),
    SF_WORST_FPS(OgreJNI.RenderTarget_SF_WORST_FPS_get()),
    SF_TRIANGLE_COUNT(OgreJNI.RenderTarget_SF_TRIANGLE_COUNT_get()),
    SF_ALL(OgreJNI.RenderTarget_SF_ALL_get());

    public final int swigValue() {
      return swigValue;
    }

    public static StatFlags swigToEnum(int swigValue) {
      StatFlags[] swigValues = StatFlags.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (StatFlags swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + StatFlags.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private StatFlags() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private StatFlags(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private StatFlags(StatFlags swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum FrameBuffer {
    FB_FRONT,
    FB_BACK,
    FB_AUTO;

    public final int swigValue() {
      return swigValue;
    }

    public static FrameBuffer swigToEnum(int swigValue) {
      FrameBuffer[] swigValues = FrameBuffer.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (FrameBuffer swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + FrameBuffer.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private FrameBuffer() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private FrameBuffer(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private FrameBuffer(FrameBuffer swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
