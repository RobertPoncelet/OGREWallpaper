/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Sampler {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Sampler(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Sampler obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Sampler(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class UVWAddressingMode {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected UVWAddressingMode(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(UVWAddressingMode obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_Sampler_UVWAddressingMode(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setU(TextureAddressingMode value) {
      OgreJNI.Sampler_UVWAddressingMode_u_set(swigCPtr, this, value.swigValue());
    }
  
    public TextureAddressingMode getU() {
      return TextureAddressingMode.swigToEnum(OgreJNI.Sampler_UVWAddressingMode_u_get(swigCPtr, this));
    }
  
    public void setV(TextureAddressingMode value) {
      OgreJNI.Sampler_UVWAddressingMode_v_set(swigCPtr, this, value.swigValue());
    }
  
    public TextureAddressingMode getV() {
      return TextureAddressingMode.swigToEnum(OgreJNI.Sampler_UVWAddressingMode_v_get(swigCPtr, this));
    }
  
    public void setW(TextureAddressingMode value) {
      OgreJNI.Sampler_UVWAddressingMode_w_set(swigCPtr, this, value.swigValue());
    }
  
    public TextureAddressingMode getW() {
      return TextureAddressingMode.swigToEnum(OgreJNI.Sampler_UVWAddressingMode_w_get(swigCPtr, this));
    }
  
    public UVWAddressingMode() {
      this(OgreJNI.new_Sampler_UVWAddressingMode(), true);
    }
  
  }

  public Sampler() {
    this(OgreJNI.new_Sampler(), true);
  }

  public void setFiltering(TextureFilterOptions filterType) {
    OgreJNI.Sampler_setFiltering__SWIG_0(swigCPtr, this, filterType.swigValue());
  }

  public void setFiltering(FilterType ftype, FilterOptions opts) {
    OgreJNI.Sampler_setFiltering__SWIG_1(swigCPtr, this, ftype.swigValue(), opts.swigValue());
  }

  public void setFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgreJNI.Sampler_setFiltering__SWIG_2(swigCPtr, this, minFilter.swigValue(), magFilter.swigValue(), mipFilter.swigValue());
  }

  public FilterOptions getFiltering(FilterType ftype) {
    return FilterOptions.swigToEnum(OgreJNI.Sampler_getFiltering(swigCPtr, this, ftype.swigValue()));
  }

  public Sampler.UVWAddressingMode getAddressingMode() {
    return new Sampler.UVWAddressingMode(OgreJNI.Sampler_getAddressingMode(swigCPtr, this), false);
  }

  public void setAddressingMode(TextureAddressingMode tam) {
    OgreJNI.Sampler_setAddressingMode__SWIG_0(swigCPtr, this, tam.swigValue());
  }

  public void setAddressingMode(TextureAddressingMode u, TextureAddressingMode v, TextureAddressingMode w) {
    OgreJNI.Sampler_setAddressingMode__SWIG_1(swigCPtr, this, u.swigValue(), v.swigValue(), w.swigValue());
  }

  public void setAddressingMode(Sampler.UVWAddressingMode uvw) {
    OgreJNI.Sampler_setAddressingMode__SWIG_2(swigCPtr, this, Sampler.UVWAddressingMode.getCPtr(uvw), uvw);
  }

  public void setAnisotropy(long maxAniso) {
    OgreJNI.Sampler_setAnisotropy(swigCPtr, this, maxAniso);
  }

  public long getAnisotropy() {
    return OgreJNI.Sampler_getAnisotropy(swigCPtr, this);
  }

  public void setMipmapBias(float bias) {
    OgreJNI.Sampler_setMipmapBias(swigCPtr, this, bias);
  }

  public float getMipmapBias() {
    return OgreJNI.Sampler_getMipmapBias(swigCPtr, this);
  }

  public void setCompareEnabled(boolean enabled) {
    OgreJNI.Sampler_setCompareEnabled(swigCPtr, this, enabled);
  }

  public boolean getCompareEnabled() {
    return OgreJNI.Sampler_getCompareEnabled(swigCPtr, this);
  }

  public void setCompareFunction(CompareFunction function) {
    OgreJNI.Sampler_setCompareFunction(swigCPtr, this, function.swigValue());
  }

  public CompareFunction getCompareFunction() {
    return CompareFunction.swigToEnum(OgreJNI.Sampler_getCompareFunction(swigCPtr, this));
  }

  public void setBorderColour(ColourValue colour) {
    OgreJNI.Sampler_setBorderColour(swigCPtr, this, ColourValue.getCPtr(colour), colour);
  }

  public ColourValue getBorderColour() {
    return new ColourValue(OgreJNI.Sampler_getBorderColour(swigCPtr, this), false);
  }

}
