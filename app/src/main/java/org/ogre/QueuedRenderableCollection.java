/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class QueuedRenderableCollection {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected QueuedRenderableCollection(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(QueuedRenderableCollection obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_QueuedRenderableCollection(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public QueuedRenderableCollection() {
    this(OgreJNI.new_QueuedRenderableCollection(), true);
  }

  public void clear() {
    OgreJNI.QueuedRenderableCollection_clear(swigCPtr, this);
  }

  public void removePassGroup(Pass p) {
    OgreJNI.QueuedRenderableCollection_removePassGroup(swigCPtr, this, Pass.getCPtr(p), p);
  }

  public void resetOrganisationModes() {
    OgreJNI.QueuedRenderableCollection_resetOrganisationModes(swigCPtr, this);
  }

  public void addOrganisationMode(QueuedRenderableCollection.OrganisationMode om) {
    OgreJNI.QueuedRenderableCollection_addOrganisationMode(swigCPtr, this, om.swigValue());
  }

  public void addRenderable(Pass pass, Renderable rend) {
    OgreJNI.QueuedRenderableCollection_addRenderable(swigCPtr, this, Pass.getCPtr(pass), pass, Renderable.getCPtr(rend), rend);
  }

  public void sort(Camera cam) {
    OgreJNI.QueuedRenderableCollection_sort(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void acceptVisitor(QueuedRenderableVisitor visitor, QueuedRenderableCollection.OrganisationMode om) {
    OgreJNI.QueuedRenderableCollection_acceptVisitor(swigCPtr, this, QueuedRenderableVisitor.getCPtr(visitor), visitor, om.swigValue());
  }

  public void merge(QueuedRenderableCollection rhs) {
    OgreJNI.QueuedRenderableCollection_merge(swigCPtr, this, QueuedRenderableCollection.getCPtr(rhs), rhs);
  }

  public enum OrganisationMode {
    OM_PASS_GROUP(OgreJNI.QueuedRenderableCollection_OM_PASS_GROUP_get()),
    OM_SORT_DESCENDING(OgreJNI.QueuedRenderableCollection_OM_SORT_DESCENDING_get()),
    OM_SORT_ASCENDING(OgreJNI.QueuedRenderableCollection_OM_SORT_ASCENDING_get());

    public final int swigValue() {
      return swigValue;
    }

    public static OrganisationMode swigToEnum(int swigValue) {
      OrganisationMode[] swigValues = OrganisationMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (OrganisationMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + OrganisationMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private OrganisationMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private OrganisationMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private OrganisationMode(OrganisationMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
