/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class InstanceManager {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected InstanceManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(InstanceManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_InstanceManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public InstanceManager(String customName, SceneManager sceneManager, String meshName, String groupName, InstanceManager.InstancingTechnique instancingTechnique, int instancingFlags, long instancesPerBatch, int subMeshIdx, boolean useBoneMatrixLookup) {
    this(OgreJNI.new_InstanceManager__SWIG_0(customName, SceneManager.getCPtr(sceneManager), sceneManager, meshName, groupName, instancingTechnique.swigValue(), instancingFlags, instancesPerBatch, subMeshIdx, useBoneMatrixLookup), true);
  }

  public InstanceManager(String customName, SceneManager sceneManager, String meshName, String groupName, InstanceManager.InstancingTechnique instancingTechnique, int instancingFlags, long instancesPerBatch, int subMeshIdx) {
    this(OgreJNI.new_InstanceManager__SWIG_1(customName, SceneManager.getCPtr(sceneManager), sceneManager, meshName, groupName, instancingTechnique.swigValue(), instancingFlags, instancesPerBatch, subMeshIdx), true);
  }

  public String getName() {
    return OgreJNI.InstanceManager_getName(swigCPtr, this);
  }

  public SceneManager getSceneManager() {
    long cPtr = OgreJNI.InstanceManager_getSceneManager(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager(cPtr, false);
  }

  public void setInstancesPerBatch(long instancesPerBatch) {
    OgreJNI.InstanceManager_setInstancesPerBatch(swigCPtr, this, instancesPerBatch);
  }

  public void setMaxLookupTableInstances(long maxLookupTableInstances) {
    OgreJNI.InstanceManager_setMaxLookupTableInstances(swigCPtr, this, maxLookupTableInstances);
  }

  public void setNumCustomParams(short numCustomParams) {
    OgreJNI.InstanceManager_setNumCustomParams(swigCPtr, this, numCustomParams);
  }

  public short getNumCustomParams() {
    return OgreJNI.InstanceManager_getNumCustomParams(swigCPtr, this);
  }

  public InstanceManager.InstancingTechnique getInstancingTechnique() {
    return InstanceManager.InstancingTechnique.swigToEnum(OgreJNI.InstanceManager_getInstancingTechnique(swigCPtr, this));
  }

  public long getMaxOrBestNumInstancesPerBatch(String materialName, long suggestedSize, int flags) {
    return OgreJNI.InstanceManager_getMaxOrBestNumInstancesPerBatch(swigCPtr, this, materialName, suggestedSize, flags);
  }

  public InstancedEntity createInstancedEntity(String materialName) {
    long cPtr = OgreJNI.InstanceManager_createInstancedEntity(swigCPtr, this, materialName);
    return (cPtr == 0) ? null : new InstancedEntity(cPtr, false);
  }

  public void cleanupEmptyBatches() {
    OgreJNI.InstanceManager_cleanupEmptyBatches(swigCPtr, this);
  }

  public void defragmentBatches(boolean optimizeCulling) {
    OgreJNI.InstanceManager_defragmentBatches(swigCPtr, this, optimizeCulling);
  }

  public void setSetting(InstanceManager.BatchSettingId id, boolean enabled, String materialName) {
    OgreJNI.InstanceManager_setSetting__SWIG_0(swigCPtr, this, id.swigValue(), enabled, materialName);
  }

  public void setSetting(InstanceManager.BatchSettingId id, boolean enabled) {
    OgreJNI.InstanceManager_setSetting__SWIG_1(swigCPtr, this, id.swigValue(), enabled);
  }

  public boolean getSetting(InstanceManager.BatchSettingId id, String materialName) {
    return OgreJNI.InstanceManager_getSetting(swigCPtr, this, id.swigValue(), materialName);
  }

  public boolean hasSettings(String materialName) {
    return OgreJNI.InstanceManager_hasSettings(swigCPtr, this, materialName);
  }

  public void setBatchesAsStaticAndUpdate(boolean bStatic) {
    OgreJNI.InstanceManager_setBatchesAsStaticAndUpdate(swigCPtr, this, bStatic);
  }

  public void _addDirtyBatch(InstanceBatch dirtyBatch) {
    OgreJNI.InstanceManager__addDirtyBatch(swigCPtr, this, InstanceBatch.getCPtr(dirtyBatch), dirtyBatch);
  }

  public void _updateDirtyBatches() {
    OgreJNI.InstanceManager__updateDirtyBatches(swigCPtr, this);
  }

  public enum InstancingTechnique {
    ShaderBased,
    TextureVTF,
    HWInstancingBasic,
    HWInstancingVTF,
    InstancingTechniquesCount;

    public final int swigValue() {
      return swigValue;
    }

    public static InstancingTechnique swigToEnum(int swigValue) {
      InstancingTechnique[] swigValues = InstancingTechnique.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (InstancingTechnique swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + InstancingTechnique.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private InstancingTechnique() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private InstancingTechnique(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private InstancingTechnique(InstancingTechnique swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum BatchSettingId {
    CAST_SHADOWS(OgreJNI.InstanceManager_CAST_SHADOWS_get()),
    SHOW_BOUNDINGBOX,
    NUM_SETTINGS;

    public final int swigValue() {
      return swigValue;
    }

    public static BatchSettingId swigToEnum(int swigValue) {
      BatchSettingId[] swigValues = BatchSettingId.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (BatchSettingId swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + BatchSettingId.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private BatchSettingId() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private BatchSettingId(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private BatchSettingId(BatchSettingId swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
