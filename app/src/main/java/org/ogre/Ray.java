/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Ray {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Ray(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Ray obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Ray(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Ray() {
    this(OgreJNI.new_Ray__SWIG_0(), true);
  }

  public Ray(Vector3 origin, Vector3 direction) {
    this(OgreJNI.new_Ray__SWIG_1(Vector3.getCPtr(origin), origin, Vector3.getCPtr(direction), direction), true);
  }

  public void setOrigin(Vector3 origin) {
    OgreJNI.Ray_setOrigin(swigCPtr, this, Vector3.getCPtr(origin), origin);
  }

  public Vector3 getOrigin() {
    return new Vector3(OgreJNI.Ray_getOrigin(swigCPtr, this), false);
  }

  public void setDirection(Vector3 dir) {
    OgreJNI.Ray_setDirection(swigCPtr, this, Vector3.getCPtr(dir), dir);
  }

  public Vector3 getDirection() {
    return new Vector3(OgreJNI.Ray_getDirection(swigCPtr, this), false);
  }

  public Vector3 getPoint(float t) {
    return new Vector3(OgreJNI.Ray_getPoint(swigCPtr, this, t), true);
  }

  public Vector3 __mul__(float t) {
    return new Vector3(OgreJNI.Ray___mul__(swigCPtr, this, t), true);
  }

  public RayTestResult intersects(Plane p) {
    return new RayTestResult(OgreJNI.Ray_intersects__SWIG_0(swigCPtr, this, Plane.getCPtr(p), p), true);
  }

  public RayTestResult intersects(PlaneBoundedVolume p) {
    return new RayTestResult(OgreJNI.Ray_intersects__SWIG_1(swigCPtr, this, PlaneBoundedVolume.getCPtr(p), p), true);
  }

  public RayTestResult intersects(Sphere s, boolean discardInside) {
    return new RayTestResult(OgreJNI.Ray_intersects__SWIG_2(swigCPtr, this, Sphere.getCPtr(s), s, discardInside), true);
  }

  public RayTestResult intersects(Sphere s) {
    return new RayTestResult(OgreJNI.Ray_intersects__SWIG_3(swigCPtr, this, Sphere.getCPtr(s), s), true);
  }

  public RayTestResult intersects(AxisAlignedBox box) {
    return new RayTestResult(OgreJNI.Ray_intersects__SWIG_4(swigCPtr, this, AxisAlignedBox.getCPtr(box), box), true);
  }

}
