/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class HardwareBufferPtr {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected HardwareBufferPtr(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HardwareBufferPtr obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_HardwareBufferPtr(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public HardwareBufferPtr(SWIGTYPE_p_std__nullptr_t arg0) {
    this(OgreJNI.new_HardwareBufferPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true);
  }

  public HardwareBufferPtr() {
    this(OgreJNI.new_HardwareBufferPtr__SWIG_1(), true);
  }

  public HardwareBufferPtr(HardwareBufferPtr r) {
    this(OgreJNI.new_HardwareBufferPtr__SWIG_2(HardwareBufferPtr.getCPtr(r), r), true);
  }

  public HardwareBuffer __deref__() {
    long cPtr = OgreJNI.HardwareBufferPtr___deref__(swigCPtr, this);
    return (cPtr == 0) ? null : new HardwareBuffer(cPtr, false);
  }

  public SWIGTYPE_p_void lock(long offset, long length, HardwareBuffer.LockOptions options) {
    long cPtr = OgreJNI.HardwareBufferPtr_lock__SWIG_0(swigCPtr, this, offset, length, options.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public SWIGTYPE_p_void lock(HardwareBuffer.LockOptions options) {
    long cPtr = OgreJNI.HardwareBufferPtr_lock__SWIG_1(swigCPtr, this, options.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void unlock() {
    OgreJNI.HardwareBufferPtr_unlock(swigCPtr, this);
  }

  public void readData(long offset, long length, SWIGTYPE_p_void pDest) {
    OgreJNI.HardwareBufferPtr_readData(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pDest));
  }

  public void writeData(long offset, long length, SWIGTYPE_p_void pSource, boolean discardWholeBuffer) {
    OgreJNI.HardwareBufferPtr_writeData__SWIG_0(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pSource), discardWholeBuffer);
  }

  public void writeData(long offset, long length, SWIGTYPE_p_void pSource) {
    OgreJNI.HardwareBufferPtr_writeData__SWIG_1(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pSource));
  }

  public void copyData(HardwareBuffer srcBuffer, long srcOffset, long dstOffset, long length, boolean discardWholeBuffer) {
    OgreJNI.HardwareBufferPtr_copyData__SWIG_0(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer, srcOffset, dstOffset, length, discardWholeBuffer);
  }

  public void copyData(HardwareBuffer srcBuffer, long srcOffset, long dstOffset, long length) {
    OgreJNI.HardwareBufferPtr_copyData__SWIG_1(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer, srcOffset, dstOffset, length);
  }

  public void copyData(HardwareBuffer srcBuffer) {
    OgreJNI.HardwareBufferPtr_copyData__SWIG_2(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer);
  }

  public void _updateFromShadow() {
    OgreJNI.HardwareBufferPtr__updateFromShadow(swigCPtr, this);
  }

  public long getSizeInBytes() {
    return OgreJNI.HardwareBufferPtr_getSizeInBytes(swigCPtr, this);
  }

  public HardwareBuffer.Usage getUsage() {
    return HardwareBuffer.Usage.swigToEnum(OgreJNI.HardwareBufferPtr_getUsage(swigCPtr, this));
  }

  public boolean isSystemMemory() {
    return OgreJNI.HardwareBufferPtr_isSystemMemory(swigCPtr, this);
  }

  public boolean hasShadowBuffer() {
    return OgreJNI.HardwareBufferPtr_hasShadowBuffer(swigCPtr, this);
  }

  public boolean isLocked() {
    return OgreJNI.HardwareBufferPtr_isLocked(swigCPtr, this);
  }

  public void suppressHardwareUpdate(boolean suppress) {
    OgreJNI.HardwareBufferPtr_suppressHardwareUpdate(swigCPtr, this, suppress);
  }

}
