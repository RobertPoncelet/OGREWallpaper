/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public enum VertexElementSemantic {
  VES_POSITION(OgreJNI.VES_POSITION_get()),
  VES_BLEND_WEIGHTS(OgreJNI.VES_BLEND_WEIGHTS_get()),
  VES_BLEND_INDICES(OgreJNI.VES_BLEND_INDICES_get()),
  VES_NORMAL(OgreJNI.VES_NORMAL_get()),
  VES_DIFFUSE(OgreJNI.VES_DIFFUSE_get()),
  VES_SPECULAR(OgreJNI.VES_SPECULAR_get()),
  VES_TEXTURE_COORDINATES(OgreJNI.VES_TEXTURE_COORDINATES_get()),
  VES_BINORMAL(OgreJNI.VES_BINORMAL_get()),
  VES_TANGENT(OgreJNI.VES_TANGENT_get()),
  VES_COUNT(OgreJNI.VES_COUNT_get());

  public final int swigValue() {
    return swigValue;
  }

  public static VertexElementSemantic swigToEnum(int swigValue) {
    VertexElementSemantic[] swigValues = VertexElementSemantic.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (VertexElementSemantic swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + VertexElementSemantic.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private VertexElementSemantic() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private VertexElementSemantic(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private VertexElementSemantic(VertexElementSemantic swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

