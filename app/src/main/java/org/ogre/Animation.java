/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Animation {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Animation(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Animation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Animation(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Animation(String name, float length) {
    this(OgreJNI.new_Animation(name, length), true);
  }

  public String getName() {
    return OgreJNI.Animation_getName(swigCPtr, this);
  }

  public float getLength() {
    return OgreJNI.Animation_getLength(swigCPtr, this);
  }

  public void setLength(float len) {
    OgreJNI.Animation_setLength(swigCPtr, this, len);
  }

  public NodeAnimationTrack createNodeTrack(int handle) {
    long cPtr = OgreJNI.Animation_createNodeTrack__SWIG_0(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new NodeAnimationTrack(cPtr, false);
  }

  public NumericAnimationTrack createNumericTrack(int handle) {
    long cPtr = OgreJNI.Animation_createNumericTrack__SWIG_0(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new NumericAnimationTrack(cPtr, false);
  }

  public VertexAnimationTrack createVertexTrack(int handle, VertexAnimationType animType) {
    long cPtr = OgreJNI.Animation_createVertexTrack__SWIG_0(swigCPtr, this, handle, animType.swigValue());
    return (cPtr == 0) ? null : new VertexAnimationTrack(cPtr, false);
  }

  public NodeAnimationTrack createNodeTrack(int handle, Node node) {
    long cPtr = OgreJNI.Animation_createNodeTrack__SWIG_1(swigCPtr, this, handle, Node.getCPtr(node), node);
    return (cPtr == 0) ? null : new NodeAnimationTrack(cPtr, false);
  }

  public NumericAnimationTrack createNumericTrack(int handle, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t anim) {
    long cPtr = OgreJNI.Animation_createNumericTrack__SWIG_1(swigCPtr, this, handle, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t.getCPtr(anim));
    return (cPtr == 0) ? null : new NumericAnimationTrack(cPtr, false);
  }

  public VertexAnimationTrack createVertexTrack(int handle, VertexData data, VertexAnimationType animType) {
    long cPtr = OgreJNI.Animation_createVertexTrack__SWIG_1(swigCPtr, this, handle, VertexData.getCPtr(data), data, animType.swigValue());
    return (cPtr == 0) ? null : new VertexAnimationTrack(cPtr, false);
  }

  public int getNumNodeTracks() {
    return OgreJNI.Animation_getNumNodeTracks(swigCPtr, this);
  }

  public NodeAnimationTrack getNodeTrack(int handle) {
    long cPtr = OgreJNI.Animation_getNodeTrack(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new NodeAnimationTrack(cPtr, false);
  }

  public boolean hasNodeTrack(int handle) {
    return OgreJNI.Animation_hasNodeTrack(swigCPtr, this, handle);
  }

  public int getNumNumericTracks() {
    return OgreJNI.Animation_getNumNumericTracks(swigCPtr, this);
  }

  public NumericAnimationTrack getNumericTrack(int handle) {
    long cPtr = OgreJNI.Animation_getNumericTrack(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new NumericAnimationTrack(cPtr, false);
  }

  public boolean hasNumericTrack(int handle) {
    return OgreJNI.Animation_hasNumericTrack(swigCPtr, this, handle);
  }

  public int getNumVertexTracks() {
    return OgreJNI.Animation_getNumVertexTracks(swigCPtr, this);
  }

  public VertexAnimationTrack getVertexTrack(int handle) {
    long cPtr = OgreJNI.Animation_getVertexTrack(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new VertexAnimationTrack(cPtr, false);
  }

  public boolean hasVertexTrack(int handle) {
    return OgreJNI.Animation_hasVertexTrack(swigCPtr, this, handle);
  }

  public void destroyNodeTrack(int handle) {
    OgreJNI.Animation_destroyNodeTrack(swigCPtr, this, handle);
  }

  public void destroyNumericTrack(int handle) {
    OgreJNI.Animation_destroyNumericTrack(swigCPtr, this, handle);
  }

  public void destroyVertexTrack(int handle) {
    OgreJNI.Animation_destroyVertexTrack(swigCPtr, this, handle);
  }

  public void destroyAllTracks() {
    OgreJNI.Animation_destroyAllTracks(swigCPtr, this);
  }

  public void destroyAllNodeTracks() {
    OgreJNI.Animation_destroyAllNodeTracks(swigCPtr, this);
  }

  public void destroyAllNumericTracks() {
    OgreJNI.Animation_destroyAllNumericTracks(swigCPtr, this);
  }

  public void destroyAllVertexTracks() {
    OgreJNI.Animation_destroyAllVertexTracks(swigCPtr, this);
  }

  public void apply(float timePos, float weight, float scale) {
    OgreJNI.Animation_apply__SWIG_0(swigCPtr, this, timePos, weight, scale);
  }

  public void apply(float timePos, float weight) {
    OgreJNI.Animation_apply__SWIG_1(swigCPtr, this, timePos, weight);
  }

  public void apply(float timePos) {
    OgreJNI.Animation_apply__SWIG_2(swigCPtr, this, timePos);
  }

  public void applyToNode(Node node, float timePos, float weight, float scale) {
    OgreJNI.Animation_applyToNode__SWIG_0(swigCPtr, this, Node.getCPtr(node), node, timePos, weight, scale);
  }

  public void applyToNode(Node node, float timePos, float weight) {
    OgreJNI.Animation_applyToNode__SWIG_1(swigCPtr, this, Node.getCPtr(node), node, timePos, weight);
  }

  public void applyToNode(Node node, float timePos) {
    OgreJNI.Animation_applyToNode__SWIG_2(swigCPtr, this, Node.getCPtr(node), node, timePos);
  }

  public void apply(Skeleton skeleton, float timePos, float weight, float scale) {
    OgreJNI.Animation_apply__SWIG_3(swigCPtr, this, Skeleton.getCPtr(skeleton), skeleton, timePos, weight, scale);
  }

  public void apply(Skeleton skeleton, float timePos, float weight) {
    OgreJNI.Animation_apply__SWIG_4(swigCPtr, this, Skeleton.getCPtr(skeleton), skeleton, timePos, weight);
  }

  public void apply(Skeleton skeleton, float timePos) {
    OgreJNI.Animation_apply__SWIG_5(swigCPtr, this, Skeleton.getCPtr(skeleton), skeleton, timePos);
  }

  public void apply(Skeleton skeleton, float timePos, float weight, SWIGTYPE_p_std__vectorT_float_t blendMask, float scale) {
    OgreJNI.Animation_apply__SWIG_6(swigCPtr, this, Skeleton.getCPtr(skeleton), skeleton, timePos, weight, SWIGTYPE_p_std__vectorT_float_t.getCPtr(blendMask), scale);
  }

  public void apply(Entity entity, float timePos, float weight, boolean software, boolean hardware) {
    OgreJNI.Animation_apply__SWIG_7(swigCPtr, this, Entity.getCPtr(entity), entity, timePos, weight, software, hardware);
  }

  public void applyToAnimable(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t anim, float timePos, float weight, float scale) {
    OgreJNI.Animation_applyToAnimable__SWIG_0(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t.getCPtr(anim), timePos, weight, scale);
  }

  public void applyToAnimable(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t anim, float timePos, float weight) {
    OgreJNI.Animation_applyToAnimable__SWIG_1(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t.getCPtr(anim), timePos, weight);
  }

  public void applyToAnimable(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t anim, float timePos) {
    OgreJNI.Animation_applyToAnimable__SWIG_2(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__AnimableValue_t.getCPtr(anim), timePos);
  }

  public void applyToVertexData(VertexData data, float timePos, float weight) {
    OgreJNI.Animation_applyToVertexData__SWIG_0(swigCPtr, this, VertexData.getCPtr(data), data, timePos, weight);
  }

  public void applyToVertexData(VertexData data, float timePos) {
    OgreJNI.Animation_applyToVertexData__SWIG_1(swigCPtr, this, VertexData.getCPtr(data), data, timePos);
  }

  public void setInterpolationMode(Animation.InterpolationMode im) {
    OgreJNI.Animation_setInterpolationMode(swigCPtr, this, im.swigValue());
  }

  public Animation.InterpolationMode getInterpolationMode() {
    return Animation.InterpolationMode.swigToEnum(OgreJNI.Animation_getInterpolationMode(swigCPtr, this));
  }

  public void setRotationInterpolationMode(Animation.RotationInterpolationMode im) {
    OgreJNI.Animation_setRotationInterpolationMode(swigCPtr, this, im.swigValue());
  }

  public Animation.RotationInterpolationMode getRotationInterpolationMode() {
    return Animation.RotationInterpolationMode.swigToEnum(OgreJNI.Animation_getRotationInterpolationMode(swigCPtr, this));
  }

  public static void setDefaultInterpolationMode(Animation.InterpolationMode im) {
    OgreJNI.Animation_setDefaultInterpolationMode(im.swigValue());
  }

  public static Animation.InterpolationMode getDefaultInterpolationMode() {
    return Animation.InterpolationMode.swigToEnum(OgreJNI.Animation_getDefaultInterpolationMode());
  }

  public static void setDefaultRotationInterpolationMode(Animation.RotationInterpolationMode im) {
    OgreJNI.Animation_setDefaultRotationInterpolationMode(im.swigValue());
  }

  public static Animation.RotationInterpolationMode getDefaultRotationInterpolationMode() {
    return Animation.RotationInterpolationMode.swigToEnum(OgreJNI.Animation_getDefaultRotationInterpolationMode());
  }

  public SWIGTYPE_p_std__mapT_unsigned_short_Ogre__NodeAnimationTrack_p_t _getNodeTrackList() {
    return new SWIGTYPE_p_std__mapT_unsigned_short_Ogre__NodeAnimationTrack_p_t(OgreJNI.Animation__getNodeTrackList(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__mapT_unsigned_short_Ogre__NumericAnimationTrack_p_t _getNumericTrackList() {
    return new SWIGTYPE_p_std__mapT_unsigned_short_Ogre__NumericAnimationTrack_p_t(OgreJNI.Animation__getNumericTrackList(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__mapT_unsigned_short_Ogre__VertexAnimationTrack_p_t _getVertexTrackList() {
    return new SWIGTYPE_p_std__mapT_unsigned_short_Ogre__VertexAnimationTrack_p_t(OgreJNI.Animation__getVertexTrackList(swigCPtr, this), false);
  }

  public void optimise(boolean discardIdentityNodeTracks) {
    OgreJNI.Animation_optimise__SWIG_0(swigCPtr, this, discardIdentityNodeTracks);
  }

  public void optimise() {
    OgreJNI.Animation_optimise__SWIG_1(swigCPtr, this);
  }

  public void _collectIdentityNodeTracks(SWIGTYPE_p_std__setT_unsigned_short_t tracks) {
    OgreJNI.Animation__collectIdentityNodeTracks(swigCPtr, this, SWIGTYPE_p_std__setT_unsigned_short_t.getCPtr(tracks));
  }

  public void _destroyNodeTracks(SWIGTYPE_p_std__setT_unsigned_short_t tracks) {
    OgreJNI.Animation__destroyNodeTracks(swigCPtr, this, SWIGTYPE_p_std__setT_unsigned_short_t.getCPtr(tracks));
  }

  public Animation clone(String newName) {
    long cPtr = OgreJNI.Animation_clone(swigCPtr, this, newName);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public void _keyFrameListChanged() {
    OgreJNI.Animation__keyFrameListChanged(swigCPtr, this);
  }

  public TimeIndex _getTimeIndex(float timePos) {
    return new TimeIndex(OgreJNI.Animation__getTimeIndex(swigCPtr, this, timePos), true);
  }

  public void setUseBaseKeyFrame(boolean useBaseKeyFrame, float keyframeTime, String baseAnimName) {
    OgreJNI.Animation_setUseBaseKeyFrame__SWIG_0(swigCPtr, this, useBaseKeyFrame, keyframeTime, baseAnimName);
  }

  public void setUseBaseKeyFrame(boolean useBaseKeyFrame, float keyframeTime) {
    OgreJNI.Animation_setUseBaseKeyFrame__SWIG_1(swigCPtr, this, useBaseKeyFrame, keyframeTime);
  }

  public void setUseBaseKeyFrame(boolean useBaseKeyFrame) {
    OgreJNI.Animation_setUseBaseKeyFrame__SWIG_2(swigCPtr, this, useBaseKeyFrame);
  }

  public boolean getUseBaseKeyFrame() {
    return OgreJNI.Animation_getUseBaseKeyFrame(swigCPtr, this);
  }

  public float getBaseKeyFrameTime() {
    return OgreJNI.Animation_getBaseKeyFrameTime(swigCPtr, this);
  }

  public String getBaseKeyFrameAnimationName() {
    return OgreJNI.Animation_getBaseKeyFrameAnimationName(swigCPtr, this);
  }

  public void _applyBaseKeyFrame() {
    OgreJNI.Animation__applyBaseKeyFrame(swigCPtr, this);
  }

  public void _notifyContainer(AnimationContainer c) {
    OgreJNI.Animation__notifyContainer(swigCPtr, this, AnimationContainer.getCPtr(c), c);
  }

  public AnimationContainer getContainer() {
    long cPtr = OgreJNI.Animation_getContainer(swigCPtr, this);
    return (cPtr == 0) ? null : new AnimationContainer(cPtr, false);
  }

  public enum InterpolationMode {
    IM_LINEAR,
    IM_SPLINE;

    public final int swigValue() {
      return swigValue;
    }

    public static InterpolationMode swigToEnum(int swigValue) {
      InterpolationMode[] swigValues = InterpolationMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (InterpolationMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + InterpolationMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private InterpolationMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private InterpolationMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private InterpolationMode(InterpolationMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum RotationInterpolationMode {
    RIM_LINEAR,
    RIM_SPHERICAL;

    public final int swigValue() {
      return swigValue;
    }

    public static RotationInterpolationMode swigToEnum(int swigValue) {
      RotationInterpolationMode[] swigValues = RotationInterpolationMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (RotationInterpolationMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + RotationInterpolationMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private RotationInterpolationMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private RotationInterpolationMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private RotationInterpolationMode(RotationInterpolationMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
