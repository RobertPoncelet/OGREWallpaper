/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Plane {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Plane(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Plane obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Plane(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setNormal(Vector3 value) {
    OgreJNI.Plane_normal_set(swigCPtr, this, Vector3.getCPtr(value), value);
  }

  public Vector3 getNormal() {
    long cPtr = OgreJNI.Plane_normal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public void setD(float value) {
    OgreJNI.Plane_d_set(swigCPtr, this, value);
  }

  public float getD() {
    return OgreJNI.Plane_d_get(swigCPtr, this);
  }

  public Plane() {
    this(OgreJNI.new_Plane__SWIG_0(), true);
  }

  public Plane(Vector3 rkNormal, float fConstant) {
    this(OgreJNI.new_Plane__SWIG_1(Vector3.getCPtr(rkNormal), rkNormal, fConstant), true);
  }

  public Plane(float a, float b, float c, float _d) {
    this(OgreJNI.new_Plane__SWIG_2(a, b, c, _d), true);
  }

  public Plane(Vector4 v) {
    this(OgreJNI.new_Plane__SWIG_3(Vector4.getCPtr(v), v), true);
  }

  public Plane(Vector3 rkNormal, Vector3 rkPoint) {
    this(OgreJNI.new_Plane__SWIG_4(Vector3.getCPtr(rkNormal), rkNormal, Vector3.getCPtr(rkPoint), rkPoint), true);
  }

  public Plane(Vector3 p0, Vector3 p1, Vector3 p2) {
    this(OgreJNI.new_Plane__SWIG_5(Vector3.getCPtr(p0), p0, Vector3.getCPtr(p1), p1, Vector3.getCPtr(p2), p2), true);
  }

  public Plane.Side getSide(Vector3 rkPoint) {
    return Plane.Side.swigToEnum(OgreJNI.Plane_getSide__SWIG_0(swigCPtr, this, Vector3.getCPtr(rkPoint), rkPoint));
  }

  public Plane.Side getSide(AxisAlignedBox box) {
    return Plane.Side.swigToEnum(OgreJNI.Plane_getSide__SWIG_1(swigCPtr, this, AxisAlignedBox.getCPtr(box), box));
  }

  public Plane.Side getSide(Vector3 centre, Vector3 halfSize) {
    return Plane.Side.swigToEnum(OgreJNI.Plane_getSide__SWIG_2(swigCPtr, this, Vector3.getCPtr(centre), centre, Vector3.getCPtr(halfSize), halfSize));
  }

  public float getDistance(Vector3 rkPoint) {
    return OgreJNI.Plane_getDistance(swigCPtr, this, Vector3.getCPtr(rkPoint), rkPoint);
  }

  public void redefine(Vector3 p0, Vector3 p1, Vector3 p2) {
    OgreJNI.Plane_redefine__SWIG_0(swigCPtr, this, Vector3.getCPtr(p0), p0, Vector3.getCPtr(p1), p1, Vector3.getCPtr(p2), p2);
  }

  public void redefine(Vector3 rkNormal, Vector3 rkPoint) {
    OgreJNI.Plane_redefine__SWIG_1(swigCPtr, this, Vector3.getCPtr(rkNormal), rkNormal, Vector3.getCPtr(rkPoint), rkPoint);
  }

  public Vector3 projectVector(Vector3 v) {
    return new Vector3(OgreJNI.Plane_projectVector(swigCPtr, this, Vector3.getCPtr(v), v), true);
  }

  public float normalise() {
    return OgreJNI.Plane_normalise(swigCPtr, this);
  }

  public Plane __sub__() {
    return new Plane(OgreJNI.Plane___sub__(swigCPtr, this), true);
  }

  public String toString() {
    return OgreJNI.Plane_toString(swigCPtr, this);
  }

  public enum Side {
    NO_SIDE,
    POSITIVE_SIDE,
    NEGATIVE_SIDE,
    BOTH_SIDE;

    public final int swigValue() {
      return swigValue;
    }

    public static Side swigToEnum(int swigValue) {
      Side[] swigValues = Side.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Side swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Side.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Side() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Side(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Side(Side swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
