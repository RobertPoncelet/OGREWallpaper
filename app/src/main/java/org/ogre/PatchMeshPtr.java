/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class PatchMeshPtr {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PatchMeshPtr(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PatchMeshPtr obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_PatchMeshPtr(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PatchMeshPtr(SWIGTYPE_p_std__nullptr_t arg0) {
    this(OgreJNI.new_PatchMeshPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true);
  }

  public PatchMeshPtr() {
    this(OgreJNI.new_PatchMeshPtr__SWIG_1(), true);
  }

  public PatchMeshPtr(PatchMeshPtr r) {
    this(OgreJNI.new_PatchMeshPtr__SWIG_2(PatchMeshPtr.getCPtr(r), r), true);
  }

  public PatchMesh __deref__() {
    long cPtr = OgreJNI.PatchMeshPtr___deref__(swigCPtr, this);
    return (cPtr == 0) ? null : new PatchMesh(cPtr, false);
  }

  public void update(SWIGTYPE_p_void controlPointBuffer, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgreJNI.PatchMeshPtr_update(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue());
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage, boolean vbUseShadow, boolean ibUseShadow) {
    OgreJNI.PatchMeshPtr_define__SWIG_0(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue(), vbUsage.swigValue(), ibUsage.swigValue(), vbUseShadow, ibUseShadow);
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage, boolean vbUseShadow) {
    OgreJNI.PatchMeshPtr_define__SWIG_1(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue(), vbUsage.swigValue(), ibUsage.swigValue(), vbUseShadow);
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage) {
    OgreJNI.PatchMeshPtr_define__SWIG_2(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue(), vbUsage.swigValue(), ibUsage.swigValue());
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage) {
    OgreJNI.PatchMeshPtr_define__SWIG_3(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue(), vbUsage.swigValue());
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgreJNI.PatchMeshPtr_define__SWIG_4(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, visibleSide.swigValue());
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel, long vMaxSubdivisionLevel) {
    OgreJNI.PatchMeshPtr_define__SWIG_5(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel);
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height, long uMaxSubdivisionLevel) {
    OgreJNI.PatchMeshPtr_define__SWIG_6(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height, uMaxSubdivisionLevel);
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, long width, long height) {
    OgreJNI.PatchMeshPtr_define__SWIG_7(swigCPtr, this, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), declaration, width, height);
  }

  public void setSubdivision(float factor) {
    OgreJNI.PatchMeshPtr_setSubdivision(swigCPtr, this, factor);
  }

  public SubMesh createSubMesh() {
    long cPtr = OgreJNI.PatchMeshPtr_createSubMesh__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SubMesh(cPtr, false);
  }

  public SubMesh createSubMesh(String name) {
    long cPtr = OgreJNI.PatchMeshPtr_createSubMesh__SWIG_1(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SubMesh(cPtr, false);
  }

  public void nameSubMesh(String name, int index) {
    OgreJNI.PatchMeshPtr_nameSubMesh(swigCPtr, this, name, index);
  }

  public void unnameSubMesh(String name) {
    OgreJNI.PatchMeshPtr_unnameSubMesh(swigCPtr, this, name);
  }

  public int _getSubMeshIndex(String name) {
    return OgreJNI.PatchMeshPtr__getSubMeshIndex(swigCPtr, this, name);
  }

  public long getNumSubMeshes() {
    return OgreJNI.PatchMeshPtr_getNumSubMeshes(swigCPtr, this);
  }

  public SubMesh getSubMesh(long index) {
    long cPtr = OgreJNI.PatchMeshPtr_getSubMesh__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SubMesh(cPtr, false);
  }

  public SubMesh getSubMesh(String name) {
    long cPtr = OgreJNI.PatchMeshPtr_getSubMesh__SWIG_1(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SubMesh(cPtr, false);
  }

  public void destroySubMesh(int index) {
    OgreJNI.PatchMeshPtr_destroySubMesh__SWIG_0(swigCPtr, this, index);
  }

  public void destroySubMesh(String name) {
    OgreJNI.PatchMeshPtr_destroySubMesh__SWIG_1(swigCPtr, this, name);
  }

  public SubMeshList getSubMeshes() {
    return new SubMeshList(OgreJNI.PatchMeshPtr_getSubMeshes(swigCPtr, this), false);
  }

  public void setSharedVertexData(VertexData value) {
    OgreJNI.PatchMeshPtr_sharedVertexData_set(swigCPtr, this, VertexData.getCPtr(value), value);
  }

  public VertexData getSharedVertexData() {
    long cPtr = OgreJNI.PatchMeshPtr_sharedVertexData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexData(cPtr, false);
  }

  public void setSharedBlendIndexToBoneIndexMap(SWIGTYPE_p_std__vectorT_unsigned_short_t value) {
    OgreJNI.PatchMeshPtr_sharedBlendIndexToBoneIndexMap_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_unsigned_short_t getSharedBlendIndexToBoneIndexMap() {
    long cPtr = OgreJNI.PatchMeshPtr_sharedBlendIndexToBoneIndexMap_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_unsigned_short_t(cPtr, false);
  }

  public MeshPtr clone(String newName, String newGroup) {
    return new MeshPtr(OgreJNI.PatchMeshPtr_clone__SWIG_0(swigCPtr, this, newName, newGroup), true);
  }

  public MeshPtr clone(String newName) {
    return new MeshPtr(OgreJNI.PatchMeshPtr_clone__SWIG_1(swigCPtr, this, newName), true);
  }

  public void reload(Resource.LoadingFlags flags) {
    OgreJNI.PatchMeshPtr_reload__SWIG_0(swigCPtr, this, flags.swigValue());
  }

  public void reload() {
    OgreJNI.PatchMeshPtr_reload__SWIG_1(swigCPtr, this);
  }

  public AxisAlignedBox getBounds() {
    return new AxisAlignedBox(OgreJNI.PatchMeshPtr_getBounds(swigCPtr, this), false);
  }

  public float getBoundingSphereRadius() {
    return OgreJNI.PatchMeshPtr_getBoundingSphereRadius(swigCPtr, this);
  }

  public float getBoneBoundingRadius() {
    return OgreJNI.PatchMeshPtr_getBoneBoundingRadius(swigCPtr, this);
  }

  public void _setBounds(AxisAlignedBox bounds, boolean pad) {
    OgreJNI.PatchMeshPtr__setBounds__SWIG_0(swigCPtr, this, AxisAlignedBox.getCPtr(bounds), bounds, pad);
  }

  public void _setBounds(AxisAlignedBox bounds) {
    OgreJNI.PatchMeshPtr__setBounds__SWIG_1(swigCPtr, this, AxisAlignedBox.getCPtr(bounds), bounds);
  }

  public void _setBoundingSphereRadius(float radius) {
    OgreJNI.PatchMeshPtr__setBoundingSphereRadius(swigCPtr, this, radius);
  }

  public void _setBoneBoundingRadius(float radius) {
    OgreJNI.PatchMeshPtr__setBoneBoundingRadius(swigCPtr, this, radius);
  }

  public void _computeBoneBoundingRadius() {
    OgreJNI.PatchMeshPtr__computeBoneBoundingRadius(swigCPtr, this);
  }

  public void _updateBoundsFromVertexBuffers(boolean pad) {
    OgreJNI.PatchMeshPtr__updateBoundsFromVertexBuffers__SWIG_0(swigCPtr, this, pad);
  }

  public void _updateBoundsFromVertexBuffers() {
    OgreJNI.PatchMeshPtr__updateBoundsFromVertexBuffers__SWIG_1(swigCPtr, this);
  }

  public void _calcBoundsFromVertexBuffer(VertexData vertexData, AxisAlignedBox outAABB, SWIGTYPE_p_float outRadius, boolean updateOnly) {
    OgreJNI.PatchMeshPtr__calcBoundsFromVertexBuffer__SWIG_0(swigCPtr, this, VertexData.getCPtr(vertexData), vertexData, AxisAlignedBox.getCPtr(outAABB), outAABB, SWIGTYPE_p_float.getCPtr(outRadius), updateOnly);
  }

  public void _calcBoundsFromVertexBuffer(VertexData vertexData, AxisAlignedBox outAABB, SWIGTYPE_p_float outRadius) {
    OgreJNI.PatchMeshPtr__calcBoundsFromVertexBuffer__SWIG_1(swigCPtr, this, VertexData.getCPtr(vertexData), vertexData, AxisAlignedBox.getCPtr(outAABB), outAABB, SWIGTYPE_p_float.getCPtr(outRadius));
  }

  public void setSkeletonName(String skelName) {
    OgreJNI.PatchMeshPtr_setSkeletonName(swigCPtr, this, skelName);
  }

  public boolean hasSkeleton() {
    return OgreJNI.PatchMeshPtr_hasSkeleton(swigCPtr, this);
  }

  public boolean hasVertexAnimation() {
    return OgreJNI.PatchMeshPtr_hasVertexAnimation(swigCPtr, this);
  }

  public SkeletonPtr getSkeleton() {
    return new SkeletonPtr(OgreJNI.PatchMeshPtr_getSkeleton(swigCPtr, this), false);
  }

  public String getSkeletonName() {
    return OgreJNI.PatchMeshPtr_getSkeletonName(swigCPtr, this);
  }

  public void _initAnimationState(AnimationStateSet animSet) {
    OgreJNI.PatchMeshPtr__initAnimationState(swigCPtr, this, AnimationStateSet.getCPtr(animSet), animSet);
  }

  public void _refreshAnimationState(AnimationStateSet animSet) {
    OgreJNI.PatchMeshPtr__refreshAnimationState(swigCPtr, this, AnimationStateSet.getCPtr(animSet), animSet);
  }

  public void addBoneAssignment(VertexBoneAssignment vertBoneAssign) {
    OgreJNI.PatchMeshPtr_addBoneAssignment(swigCPtr, this, VertexBoneAssignment.getCPtr(vertBoneAssign), vertBoneAssign);
  }

  public void clearBoneAssignments() {
    OgreJNI.PatchMeshPtr_clearBoneAssignments(swigCPtr, this);
  }

  public void _notifySkeleton(SkeletonPtr pSkel) {
    OgreJNI.PatchMeshPtr__notifySkeleton(swigCPtr, this, SkeletonPtr.getCPtr(pSkel), pSkel);
  }

  public SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t getBoneAssignments() {
    return new SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t(OgreJNI.PatchMeshPtr_getBoneAssignments(swigCPtr, this), false);
  }

  public int getNumLodLevels() {
    return OgreJNI.PatchMeshPtr_getNumLodLevels(swigCPtr, this);
  }

  public MeshLodUsage getLodLevel(int index) {
    return new MeshLodUsage(OgreJNI.PatchMeshPtr_getLodLevel(swigCPtr, this, index), false);
  }

  public int getLodIndex(float value) {
    return OgreJNI.PatchMeshPtr_getLodIndex(swigCPtr, this, value);
  }

  public boolean hasManualLodLevel() {
    return OgreJNI.PatchMeshPtr_hasManualLodLevel(swigCPtr, this);
  }

  public void updateManualLodLevel(int index, String meshName) {
    OgreJNI.PatchMeshPtr_updateManualLodLevel(swigCPtr, this, index, meshName);
  }

  public void _setLodInfo(int numLevels) {
    OgreJNI.PatchMeshPtr__setLodInfo(swigCPtr, this, numLevels);
  }

  public void _setLodUsage(int level, MeshLodUsage usage) {
    OgreJNI.PatchMeshPtr__setLodUsage(swigCPtr, this, level, MeshLodUsage.getCPtr(usage), usage);
  }

  public void _setSubMeshLodFaceList(int subIdx, int level, IndexData facedata) {
    OgreJNI.PatchMeshPtr__setSubMeshLodFaceList(swigCPtr, this, subIdx, level, IndexData.getCPtr(facedata), facedata);
  }

  public boolean _isManualLodLevel(int level) {
    return OgreJNI.PatchMeshPtr__isManualLodLevel(swigCPtr, this, level);
  }

  public void removeLodLevels() {
    OgreJNI.PatchMeshPtr_removeLodLevels(swigCPtr, this);
  }

  public void setHardwareBufferManager(HardwareBufferManagerBase bufferManager) {
    OgreJNI.PatchMeshPtr_setHardwareBufferManager(swigCPtr, this, HardwareBufferManagerBase.getCPtr(bufferManager), bufferManager);
  }

  public HardwareBufferManagerBase getHardwareBufferManager() {
    long cPtr = OgreJNI.PatchMeshPtr_getHardwareBufferManager(swigCPtr, this);
    return (cPtr == 0) ? null : new HardwareBufferManagerBase(cPtr, false);
  }

  public void setVertexBufferPolicy(HardwareBuffer.Usage usage, boolean shadowBuffer) {
    OgreJNI.PatchMeshPtr_setVertexBufferPolicy__SWIG_0(swigCPtr, this, usage.swigValue(), shadowBuffer);
  }

  public void setVertexBufferPolicy(HardwareBuffer.Usage usage) {
    OgreJNI.PatchMeshPtr_setVertexBufferPolicy__SWIG_1(swigCPtr, this, usage.swigValue());
  }

  public void setIndexBufferPolicy(HardwareBuffer.Usage usage, boolean shadowBuffer) {
    OgreJNI.PatchMeshPtr_setIndexBufferPolicy__SWIG_0(swigCPtr, this, usage.swigValue(), shadowBuffer);
  }

  public void setIndexBufferPolicy(HardwareBuffer.Usage usage) {
    OgreJNI.PatchMeshPtr_setIndexBufferPolicy__SWIG_1(swigCPtr, this, usage.swigValue());
  }

  public HardwareBuffer.Usage getVertexBufferUsage() {
    return HardwareBuffer.Usage.swigToEnum(OgreJNI.PatchMeshPtr_getVertexBufferUsage(swigCPtr, this));
  }

  public HardwareBuffer.Usage getIndexBufferUsage() {
    return HardwareBuffer.Usage.swigToEnum(OgreJNI.PatchMeshPtr_getIndexBufferUsage(swigCPtr, this));
  }

  public boolean isVertexBufferShadowed() {
    return OgreJNI.PatchMeshPtr_isVertexBufferShadowed(swigCPtr, this);
  }

  public boolean isIndexBufferShadowed() {
    return OgreJNI.PatchMeshPtr_isIndexBufferShadowed(swigCPtr, this);
  }

  public int _rationaliseBoneAssignments(long vertexCount, SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t assignments) {
    return OgreJNI.PatchMeshPtr__rationaliseBoneAssignments(swigCPtr, this, vertexCount, SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t.getCPtr(assignments));
  }

  public void _compileBoneAssignments() {
    OgreJNI.PatchMeshPtr__compileBoneAssignments(swigCPtr, this);
  }

  public void _updateCompiledBoneAssignments() {
    OgreJNI.PatchMeshPtr__updateCompiledBoneAssignments(swigCPtr, this);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, int sourceTexCoordSet, int index, boolean splitMirrored, boolean splitRotated, boolean storeParityInW) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_0(swigCPtr, this, targetSemantic.swigValue(), sourceTexCoordSet, index, splitMirrored, splitRotated, storeParityInW);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, int sourceTexCoordSet, int index, boolean splitMirrored, boolean splitRotated) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_1(swigCPtr, this, targetSemantic.swigValue(), sourceTexCoordSet, index, splitMirrored, splitRotated);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, int sourceTexCoordSet, int index, boolean splitMirrored) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_2(swigCPtr, this, targetSemantic.swigValue(), sourceTexCoordSet, index, splitMirrored);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, int sourceTexCoordSet, int index) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_3(swigCPtr, this, targetSemantic.swigValue(), sourceTexCoordSet, index);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, int sourceTexCoordSet) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_4(swigCPtr, this, targetSemantic.swigValue(), sourceTexCoordSet);
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic) {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_5(swigCPtr, this, targetSemantic.swigValue());
  }

  public void buildTangentVectors() {
    OgreJNI.PatchMeshPtr_buildTangentVectors__SWIG_6(swigCPtr, this);
  }

  public boolean suggestTangentVectorBuildParams(VertexElementSemantic targetSemantic, SWIGTYPE_p_unsigned_short outSourceCoordSet, SWIGTYPE_p_unsigned_short outIndex) {
    return OgreJNI.PatchMeshPtr_suggestTangentVectorBuildParams(swigCPtr, this, targetSemantic.swigValue(), SWIGTYPE_p_unsigned_short.getCPtr(outSourceCoordSet), SWIGTYPE_p_unsigned_short.getCPtr(outIndex));
  }

  public void buildEdgeList() {
    OgreJNI.PatchMeshPtr_buildEdgeList(swigCPtr, this);
  }

  public void freeEdgeList() {
    OgreJNI.PatchMeshPtr_freeEdgeList(swigCPtr, this);
  }

  public void prepareForShadowVolume() {
    OgreJNI.PatchMeshPtr_prepareForShadowVolume(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
    long cPtr = OgreJNI.PatchMeshPtr_getEdgeList__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
  }

  public boolean isPreparedForShadowVolumes() {
    return OgreJNI.PatchMeshPtr_isPreparedForShadowVolumes(swigCPtr, this);
  }

  public boolean isEdgeListBuilt() {
    return OgreJNI.PatchMeshPtr_isEdgeListBuilt(swigCPtr, this);
  }

  public void prepareMatricesForVertexBlend(SWIGTYPE_p_p_Ogre__Affine3 blendMatrices, Affine3 boneMatrices, SWIGTYPE_p_std__vectorT_unsigned_short_t indexMap) {
    OgreJNI.PatchMeshPtr_prepareMatricesForVertexBlend(swigCPtr, this, SWIGTYPE_p_p_Ogre__Affine3.getCPtr(blendMatrices), Affine3.getCPtr(boneMatrices), boneMatrices, SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(indexMap));
  }

  public void softwareVertexBlend(VertexData sourceVertexData, VertexData targetVertexData, SWIGTYPE_p_p_Ogre__Affine3 blendMatrices, long numMatrices, boolean blendNormals) {
    OgreJNI.PatchMeshPtr_softwareVertexBlend(swigCPtr, this, VertexData.getCPtr(sourceVertexData), sourceVertexData, VertexData.getCPtr(targetVertexData), targetVertexData, SWIGTYPE_p_p_Ogre__Affine3.getCPtr(blendMatrices), numMatrices, blendNormals);
  }

  public void softwareVertexMorph(float t, HardwareVertexBufferPtr b1, HardwareVertexBufferPtr b2, VertexData targetVertexData) {
    OgreJNI.PatchMeshPtr_softwareVertexMorph(swigCPtr, this, t, HardwareVertexBufferPtr.getCPtr(b1), b1, HardwareVertexBufferPtr.getCPtr(b2), b2, VertexData.getCPtr(targetVertexData), targetVertexData);
  }

  public void softwareVertexPoseBlend(float weight, SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t vertexOffsetMap, SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t normalsMap, VertexData targetVertexData) {
    OgreJNI.PatchMeshPtr_softwareVertexPoseBlend(swigCPtr, this, weight, SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t.getCPtr(vertexOffsetMap), SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t.getCPtr(normalsMap), VertexData.getCPtr(targetVertexData), targetVertexData);
  }

  public SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_short_t getSubMeshNameMap() {
    return new SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_short_t(OgreJNI.PatchMeshPtr_getSubMeshNameMap(swigCPtr, this), false);
  }

  public void setAutoBuildEdgeLists(boolean autobuild) {
    OgreJNI.PatchMeshPtr_setAutoBuildEdgeLists(swigCPtr, this, autobuild);
  }

  public boolean getAutoBuildEdgeLists() {
    return OgreJNI.PatchMeshPtr_getAutoBuildEdgeLists(swigCPtr, this);
  }

  public VertexAnimationType getSharedVertexDataAnimationType() {
    return VertexAnimationType.swigToEnum(OgreJNI.PatchMeshPtr_getSharedVertexDataAnimationType(swigCPtr, this));
  }

  public boolean getSharedVertexDataAnimationIncludesNormals() {
    return OgreJNI.PatchMeshPtr_getSharedVertexDataAnimationIncludesNormals(swigCPtr, this);
  }

  public Animation createAnimation(String name, float length) {
    long cPtr = OgreJNI.PatchMeshPtr_createAnimation(swigCPtr, this, name, length);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public Animation getAnimation(String name) {
    long cPtr = OgreJNI.PatchMeshPtr_getAnimation__SWIG_0(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public Animation getAnimation(int index) {
    long cPtr = OgreJNI.PatchMeshPtr_getAnimation__SWIG_1(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public Animation _getAnimationImpl(String name) {
    long cPtr = OgreJNI.PatchMeshPtr__getAnimationImpl(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public boolean hasAnimation(String name) {
    return OgreJNI.PatchMeshPtr_hasAnimation(swigCPtr, this, name);
  }

  public void removeAnimation(String name) {
    OgreJNI.PatchMeshPtr_removeAnimation(swigCPtr, this, name);
  }

  public int getNumAnimations() {
    return OgreJNI.PatchMeshPtr_getNumAnimations(swigCPtr, this);
  }

  public void removeAllAnimations() {
    OgreJNI.PatchMeshPtr_removeAllAnimations(swigCPtr, this);
  }

  public VertexData getVertexDataByTrackHandle(int handle) {
    long cPtr = OgreJNI.PatchMeshPtr_getVertexDataByTrackHandle(swigCPtr, this, handle);
    return (cPtr == 0) ? null : new VertexData(cPtr, false);
  }

  public void updateMaterialForAllSubMeshes() {
    OgreJNI.PatchMeshPtr_updateMaterialForAllSubMeshes(swigCPtr, this);
  }

  public void _determineAnimationTypes() {
    OgreJNI.PatchMeshPtr__determineAnimationTypes(swigCPtr, this);
  }

  public boolean _getAnimationTypesDirty() {
    return OgreJNI.PatchMeshPtr__getAnimationTypesDirty(swigCPtr, this);
  }

  public Pose createPose(int target, String name) {
    long cPtr = OgreJNI.PatchMeshPtr_createPose__SWIG_0(swigCPtr, this, target, name);
    return (cPtr == 0) ? null : new Pose(cPtr, false);
  }

  public Pose createPose(int target) {
    long cPtr = OgreJNI.PatchMeshPtr_createPose__SWIG_1(swigCPtr, this, target);
    return (cPtr == 0) ? null : new Pose(cPtr, false);
  }

  public void removePose(int index) {
    OgreJNI.PatchMeshPtr_removePose__SWIG_0(swigCPtr, this, index);
  }

  public void removePose(String name) {
    OgreJNI.PatchMeshPtr_removePose__SWIG_1(swigCPtr, this, name);
  }

  public void removeAllPoses() {
    OgreJNI.PatchMeshPtr_removeAllPoses(swigCPtr, this);
  }

  public PoseList getPoseList() {
    return new PoseList(OgreJNI.PatchMeshPtr_getPoseList(swigCPtr, this), false);
  }

  public LodStrategy getLodStrategy() {
    long cPtr = OgreJNI.PatchMeshPtr_getLodStrategy(swigCPtr, this);
    return (cPtr == 0) ? null : new LodStrategy(cPtr, false);
  }

  public void setLodStrategy(LodStrategy lodStrategy) {
    OgreJNI.PatchMeshPtr_setLodStrategy(swigCPtr, this, LodStrategy.getCPtr(lodStrategy), lodStrategy);
  }

  public void prepare(boolean backgroundThread) {
    OgreJNI.PatchMeshPtr_prepare__SWIG_0(swigCPtr, this, backgroundThread);
  }

  public void prepare() {
    OgreJNI.PatchMeshPtr_prepare__SWIG_1(swigCPtr, this);
  }

  public void load(boolean backgroundThread) {
    OgreJNI.PatchMeshPtr_load__SWIG_0(swigCPtr, this, backgroundThread);
  }

  public void load() {
    OgreJNI.PatchMeshPtr_load__SWIG_1(swigCPtr, this);
  }

  public boolean isReloadable() {
    return OgreJNI.PatchMeshPtr_isReloadable(swigCPtr, this);
  }

  public boolean isManuallyLoaded() {
    return OgreJNI.PatchMeshPtr_isManuallyLoaded(swigCPtr, this);
  }

  public void unload() {
    OgreJNI.PatchMeshPtr_unload(swigCPtr, this);
  }

  public long getSize() {
    return OgreJNI.PatchMeshPtr_getSize(swigCPtr, this);
  }

  public void touch() {
    OgreJNI.PatchMeshPtr_touch(swigCPtr, this);
  }

  public String getName() {
    return OgreJNI.PatchMeshPtr_getName(swigCPtr, this);
  }

  public long getHandle() {
    return OgreJNI.PatchMeshPtr_getHandle(swigCPtr, this);
  }

  public boolean isPrepared() {
    return OgreJNI.PatchMeshPtr_isPrepared(swigCPtr, this);
  }

  public boolean isLoaded() {
    return OgreJNI.PatchMeshPtr_isLoaded(swigCPtr, this);
  }

  public boolean isLoading() {
    return OgreJNI.PatchMeshPtr_isLoading(swigCPtr, this);
  }

  public Resource.LoadingState getLoadingState() {
    return Resource.LoadingState.swigToEnum(OgreJNI.PatchMeshPtr_getLoadingState(swigCPtr, this));
  }

  public boolean isBackgroundLoaded() {
    return OgreJNI.PatchMeshPtr_isBackgroundLoaded(swigCPtr, this);
  }

  public void setBackgroundLoaded(boolean bl) {
    OgreJNI.PatchMeshPtr_setBackgroundLoaded(swigCPtr, this, bl);
  }

  public void escalateLoading() {
    OgreJNI.PatchMeshPtr_escalateLoading(swigCPtr, this);
  }

  public void addListener(Resource.Listener lis) {
    OgreJNI.PatchMeshPtr_addListener(swigCPtr, this, Resource.Listener.getCPtr(lis), lis);
  }

  public void removeListener(Resource.Listener lis) {
    OgreJNI.PatchMeshPtr_removeListener(swigCPtr, this, Resource.Listener.getCPtr(lis), lis);
  }

  public String getGroup() {
    return OgreJNI.PatchMeshPtr_getGroup(swigCPtr, this);
  }

  public void changeGroupOwnership(String newGroup) {
    OgreJNI.PatchMeshPtr_changeGroupOwnership(swigCPtr, this, newGroup);
  }

  public ResourceManager getCreator() {
    long cPtr = OgreJNI.PatchMeshPtr_getCreator(swigCPtr, this);
    return (cPtr == 0) ? null : new ResourceManager(cPtr, false);
  }

  public String getOrigin() {
    return OgreJNI.PatchMeshPtr_getOrigin(swigCPtr, this);
  }

  public void _notifyOrigin(String origin) {
    OgreJNI.PatchMeshPtr__notifyOrigin(swigCPtr, this, origin);
  }

  public long getStateCount() {
    return OgreJNI.PatchMeshPtr_getStateCount(swigCPtr, this);
  }

  public void _dirtyState() {
    OgreJNI.PatchMeshPtr__dirtyState(swigCPtr, this);
  }

  public void _fireLoadingComplete(boolean wasBackgroundLoaded) {
    OgreJNI.PatchMeshPtr__fireLoadingComplete(swigCPtr, this, wasBackgroundLoaded);
  }

  public void _firePreparingComplete(boolean wasBackgroundLoaded) {
    OgreJNI.PatchMeshPtr__firePreparingComplete(swigCPtr, this, wasBackgroundLoaded);
  }

  public void _fireUnloadingComplete() {
    OgreJNI.PatchMeshPtr__fireUnloadingComplete(swigCPtr, this);
  }

  public ParamDictionary getParamDictionary() {
    long cPtr = OgreJNI.PatchMeshPtr_getParamDictionary__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ParamDictionary(cPtr, false);
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ParameterDef_t getParameters() {
    return new SWIGTYPE_p_std__vectorT_Ogre__ParameterDef_t(OgreJNI.PatchMeshPtr_getParameters(swigCPtr, this), false);
  }

  public boolean setParameter(String name, String value) {
    return OgreJNI.PatchMeshPtr_setParameter(swigCPtr, this, name, value);
  }

  public void setParameterList(NameValuePairList paramList) {
    OgreJNI.PatchMeshPtr_setParameterList(swigCPtr, this, NameValuePairList.getCPtr(paramList), paramList);
  }

  public String getParameter(String name) {
    return OgreJNI.PatchMeshPtr_getParameter(swigCPtr, this, name);
  }

  public void copyParametersTo(StringInterface dest) {
    OgreJNI.PatchMeshPtr_copyParametersTo(swigCPtr, this, StringInterface.getCPtr(dest), dest);
  }

  public void cleanupDictionary() {
    OgreJNI.PatchMeshPtr_cleanupDictionary(swigCPtr, this);
  }

}
