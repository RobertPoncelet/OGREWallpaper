/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Widget {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Widget(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Widget obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitesJNI.delete_Widget(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Widget() {
    this(BitesJNI.new_Widget(), true);
  }

  public void cleanup() {
    BitesJNI.Widget_cleanup(swigCPtr, this);
  }

  public static void nukeOverlayElement(SWIGTYPE_p_Ogre__OverlayElement element) {
    BitesJNI.Widget_nukeOverlayElement(SWIGTYPE_p_Ogre__OverlayElement.getCPtr(element));
  }

  public static boolean isCursorOver(SWIGTYPE_p_Ogre__OverlayElement element, Vector2 cursorPos, float voidBorder) {
    return BitesJNI.Widget_isCursorOver__SWIG_0(SWIGTYPE_p_Ogre__OverlayElement.getCPtr(element), Vector2.getCPtr(cursorPos), cursorPos, voidBorder);
  }

  public static boolean isCursorOver(SWIGTYPE_p_Ogre__OverlayElement element, Vector2 cursorPos) {
    return BitesJNI.Widget_isCursorOver__SWIG_1(SWIGTYPE_p_Ogre__OverlayElement.getCPtr(element), Vector2.getCPtr(cursorPos), cursorPos);
  }

  public static Vector2 cursorOffset(SWIGTYPE_p_Ogre__OverlayElement element, Vector2 cursorPos) {
    return new Vector2(BitesJNI.Widget_cursorOffset(SWIGTYPE_p_Ogre__OverlayElement.getCPtr(element), Vector2.getCPtr(cursorPos), cursorPos), true);
  }

  public static float getCaptionWidth(SWIGTYPE_p_Ogre__DisplayString caption, SWIGTYPE_p_Ogre__TextAreaOverlayElement area) {
    return BitesJNI.Widget_getCaptionWidth(SWIGTYPE_p_Ogre__DisplayString.getCPtr(caption), SWIGTYPE_p_Ogre__TextAreaOverlayElement.getCPtr(area));
  }

  public static void fitCaptionToArea(SWIGTYPE_p_Ogre__DisplayString caption, SWIGTYPE_p_Ogre__TextAreaOverlayElement area, float maxWidth) {
    BitesJNI.Widget_fitCaptionToArea(SWIGTYPE_p_Ogre__DisplayString.getCPtr(caption), SWIGTYPE_p_Ogre__TextAreaOverlayElement.getCPtr(area), maxWidth);
  }

  public SWIGTYPE_p_Ogre__OverlayElement getOverlayElement() {
    long cPtr = BitesJNI.Widget_getOverlayElement(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__OverlayElement(cPtr, false);
  }

  public String getName() {
    return BitesJNI.Widget_getName(swigCPtr, this);
  }

  public TrayLocation getTrayLocation() {
    return TrayLocation.swigToEnum(BitesJNI.Widget_getTrayLocation(swigCPtr, this));
  }

  public void hide() {
    BitesJNI.Widget_hide(swigCPtr, this);
  }

  public void show() {
    BitesJNI.Widget_show(swigCPtr, this);
  }

  public boolean isVisible() {
    return BitesJNI.Widget_isVisible(swigCPtr, this);
  }

  public void _cursorPressed(Vector2 cursorPos) {
    BitesJNI.Widget__cursorPressed(swigCPtr, this, Vector2.getCPtr(cursorPos), cursorPos);
  }

  public void _cursorReleased(Vector2 cursorPos) {
    BitesJNI.Widget__cursorReleased(swigCPtr, this, Vector2.getCPtr(cursorPos), cursorPos);
  }

  public void _cursorMoved(Vector2 cursorPos, float wheelDelta) {
    BitesJNI.Widget__cursorMoved(swigCPtr, this, Vector2.getCPtr(cursorPos), cursorPos, wheelDelta);
  }

  public void _focusLost() {
    BitesJNI.Widget__focusLost(swigCPtr, this);
  }

  public void _assignToTray(TrayLocation trayLoc) {
    BitesJNI.Widget__assignToTray(swigCPtr, this, trayLoc.swigValue());
  }

  public void _assignListener(TrayListener listener) {
    BitesJNI.Widget__assignListener(swigCPtr, this, TrayListener.getCPtr(listener), listener);
  }

}
