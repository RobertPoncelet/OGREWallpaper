/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class RenderSystem {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RenderSystem(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RenderSystem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_RenderSystem(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public String getName() {
    return OgreJNI.RenderSystem_getName(swigCPtr, this);
  }

  public ConfigOptionMap getConfigOptions() {
    return new ConfigOptionMap(OgreJNI.RenderSystem_getConfigOptions(swigCPtr, this), false);
  }

  public void setConfigOption(String name, String value) {
    OgreJNI.RenderSystem_setConfigOption(swigCPtr, this, name, value);
  }

  public RenderWindowDescription getRenderWindowDescription() {
    return new RenderWindowDescription(OgreJNI.RenderSystem_getRenderWindowDescription(swigCPtr, this), true);
  }

  public HardwareOcclusionQuery createHardwareOcclusionQuery() {
    long cPtr = OgreJNI.RenderSystem_createHardwareOcclusionQuery(swigCPtr, this);
    return (cPtr == 0) ? null : new HardwareOcclusionQuery(cPtr, false);
  }

  public void destroyHardwareOcclusionQuery(HardwareOcclusionQuery hq) {
    OgreJNI.RenderSystem_destroyHardwareOcclusionQuery(swigCPtr, this, HardwareOcclusionQuery.getCPtr(hq), hq);
  }

  public String validateConfigOptions() {
    return OgreJNI.RenderSystem_validateConfigOptions(swigCPtr, this);
  }

  public void _initialise() {
    OgreJNI.RenderSystem__initialise(swigCPtr, this);
  }

  public boolean isStaticBufferLockable() {
    return OgreJNI.RenderSystem_isStaticBufferLockable(swigCPtr, this);
  }

  public RenderSystemCapabilities createRenderSystemCapabilities() {
    long cPtr = OgreJNI.RenderSystem_createRenderSystemCapabilities(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderSystemCapabilities(cPtr, false);
  }

  public RenderSystemCapabilities getMutableCapabilities() {
    long cPtr = OgreJNI.RenderSystem_getMutableCapabilities(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderSystemCapabilities(cPtr, false);
  }

  public void useCustomRenderSystemCapabilities(RenderSystemCapabilities capabilities) {
    OgreJNI.RenderSystem_useCustomRenderSystemCapabilities(swigCPtr, this, RenderSystemCapabilities.getCPtr(capabilities), capabilities);
  }

  public void reinitialise() {
    OgreJNI.RenderSystem_reinitialise(swigCPtr, this);
  }

  public void shutdown() {
    OgreJNI.RenderSystem_shutdown(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t getFixedFunctionParams(int tracking, FogMode fog) {
    return new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t(OgreJNI.RenderSystem_getFixedFunctionParams(swigCPtr, this, tracking, fog.swigValue()), false);
  }

  public void applyFixedFunctionParams(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t params, int variabilityMask) {
    OgreJNI.RenderSystem_applyFixedFunctionParams(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t.getCPtr(params), variabilityMask);
  }

  public void setShadingType(ShadeOptions so) {
    OgreJNI.RenderSystem_setShadingType(swigCPtr, this, so.swigValue());
  }

  public void setLightingEnabled(boolean enabled) {
    OgreJNI.RenderSystem_setLightingEnabled(swigCPtr, this, enabled);
  }

  public RenderWindow _createRenderWindow(String name, long width, long height, boolean fullScreen, NameValuePairList miscParams) {
    long cPtr = OgreJNI.RenderSystem__createRenderWindow__SWIG_0(swigCPtr, this, name, width, height, fullScreen, NameValuePairList.getCPtr(miscParams), miscParams);
    return (cPtr == 0) ? null : new RenderWindow(cPtr, false);
  }

  public RenderWindow _createRenderWindow(String name, long width, long height, boolean fullScreen) {
    long cPtr = OgreJNI.RenderSystem__createRenderWindow__SWIG_1(swigCPtr, this, name, width, height, fullScreen);
    return (cPtr == 0) ? null : new RenderWindow(cPtr, false);
  }

  public boolean _createRenderWindows(SWIGTYPE_p_std__vectorT_Ogre__RenderWindowDescription_t renderWindowDescriptions, SWIGTYPE_p_std__vectorT_Ogre__RenderWindow_p_t createdWindows) {
    return OgreJNI.RenderSystem__createRenderWindows(swigCPtr, this, SWIGTYPE_p_std__vectorT_Ogre__RenderWindowDescription_t.getCPtr(renderWindowDescriptions), SWIGTYPE_p_std__vectorT_Ogre__RenderWindow_p_t.getCPtr(createdWindows));
  }

  public MultiRenderTarget createMultiRenderTarget(String name) {
    long cPtr = OgreJNI.RenderSystem_createMultiRenderTarget(swigCPtr, this, name);
    return (cPtr == 0) ? null : new MultiRenderTarget(cPtr, false);
  }

  public void destroyRenderWindow(String name) {
    OgreJNI.RenderSystem_destroyRenderWindow(swigCPtr, this, name);
  }

  public void destroyRenderTexture(String name) {
    OgreJNI.RenderSystem_destroyRenderTexture(swigCPtr, this, name);
  }

  public void destroyRenderTarget(String name) {
    OgreJNI.RenderSystem_destroyRenderTarget(swigCPtr, this, name);
  }

  public void attachRenderTarget(RenderTarget target) {
    OgreJNI.RenderSystem_attachRenderTarget(swigCPtr, this, RenderTarget.getCPtr(target), target);
  }

  public RenderTarget getRenderTarget(String name) {
    long cPtr = OgreJNI.RenderSystem_getRenderTarget(swigCPtr, this, name);
    return (cPtr == 0) ? null : new RenderTarget(cPtr, false);
  }

  public RenderTarget detachRenderTarget(String name) {
    long cPtr = OgreJNI.RenderSystem_detachRenderTarget(swigCPtr, this, name);
    return (cPtr == 0) ? null : new RenderTarget(cPtr, false);
  }

  public HardwareVertexBufferPtr getGlobalInstanceVertexBuffer() {
    return new HardwareVertexBufferPtr(OgreJNI.RenderSystem_getGlobalInstanceVertexBuffer(swigCPtr, this), true);
  }

  public void setGlobalInstanceVertexBuffer(HardwareVertexBufferPtr val) {
    OgreJNI.RenderSystem_setGlobalInstanceVertexBuffer(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(val), val);
  }

  public VertexDeclaration getGlobalInstanceVertexBufferVertexDeclaration() {
    long cPtr = OgreJNI.RenderSystem_getGlobalInstanceVertexBufferVertexDeclaration(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexDeclaration(cPtr, false);
  }

  public void setGlobalInstanceVertexBufferVertexDeclaration(VertexDeclaration val) {
    OgreJNI.RenderSystem_setGlobalInstanceVertexBufferVertexDeclaration(swigCPtr, this, VertexDeclaration.getCPtr(val), val);
  }

  public long getGlobalNumberOfInstances() {
    return OgreJNI.RenderSystem_getGlobalNumberOfInstances(swigCPtr, this);
  }

  public void setGlobalNumberOfInstances(long val) {
    OgreJNI.RenderSystem_setGlobalNumberOfInstances(swigCPtr, this, val);
  }

  public void setDepthBufferFor(RenderTarget renderTarget) {
    OgreJNI.RenderSystem_setDepthBufferFor(swigCPtr, this, RenderTarget.getCPtr(renderTarget), renderTarget);
  }

  public boolean isReverseDepthBufferEnabled() {
    return OgreJNI.RenderSystem_isReverseDepthBufferEnabled(swigCPtr, this);
  }

  public void _useLights(int limit) {
    OgreJNI.RenderSystem__useLights(swigCPtr, this, limit);
  }

  public void _setTextureUnitSettings(long texUnit, TextureUnitState tl) {
    OgreJNI.RenderSystem__setTextureUnitSettings(swigCPtr, this, texUnit, TextureUnitState.getCPtr(tl), tl);
  }

  public void _setSampler(long texUnit, Sampler s) {
    OgreJNI.RenderSystem__setSampler(swigCPtr, this, texUnit, Sampler.getCPtr(s), s);
  }

  public void _disableTextureUnit(long texUnit) {
    OgreJNI.RenderSystem__disableTextureUnit(swigCPtr, this, texUnit);
  }

  public void _disableTextureUnitsFrom(long texUnit) {
    OgreJNI.RenderSystem__disableTextureUnitsFrom(swigCPtr, this, texUnit);
  }

  public void _setPointSpritesEnabled(boolean enabled) {
    OgreJNI.RenderSystem__setPointSpritesEnabled(swigCPtr, this, enabled);
  }

  public void _setPointParameters(boolean attenuationEnabled, float minSize, float maxSize) {
    OgreJNI.RenderSystem__setPointParameters(swigCPtr, this, attenuationEnabled, minSize, maxSize);
  }

  public void _setLineWidth(float width) {
    OgreJNI.RenderSystem__setLineWidth(swigCPtr, this, width);
  }

  public void _setTexture(long unit, boolean enabled, TexturePtr texPtr) {
    OgreJNI.RenderSystem__setTexture(swigCPtr, this, unit, enabled, TexturePtr.getCPtr(texPtr), texPtr);
  }

  public void _setVertexTexture(long unit, TexturePtr tex) {
    OgreJNI.RenderSystem__setVertexTexture(swigCPtr, this, unit, TexturePtr.getCPtr(tex), tex);
  }

  public void _setTextureCoordSet(long unit, long index) {
    OgreJNI.RenderSystem__setTextureCoordSet(swigCPtr, this, unit, index);
  }

  public void _setTextureCoordCalculation(long unit, TexCoordCalcMethod m, Frustum frustum) {
    OgreJNI.RenderSystem__setTextureCoordCalculation__SWIG_0(swigCPtr, this, unit, m.swigValue(), Frustum.getCPtr(frustum), frustum);
  }

  public void _setTextureCoordCalculation(long unit, TexCoordCalcMethod m) {
    OgreJNI.RenderSystem__setTextureCoordCalculation__SWIG_1(swigCPtr, this, unit, m.swigValue());
  }

  public void _setTextureBlendMode(long unit, LayerBlendModeEx bm) {
    OgreJNI.RenderSystem__setTextureBlendMode(swigCPtr, this, unit, LayerBlendModeEx.getCPtr(bm), bm);
  }

  public void _setTextureMatrix(long unit, Matrix4 xform) {
    OgreJNI.RenderSystem__setTextureMatrix(swigCPtr, this, unit, Matrix4.getCPtr(xform), xform);
  }

  public void setColourBlendState(ColourBlendState state) {
    OgreJNI.RenderSystem_setColourBlendState(swigCPtr, this, ColourBlendState.getCPtr(state), state);
  }

  public void _setSeparateSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha, SceneBlendOperation op, SceneBlendOperation alphaOp) {
    OgreJNI.RenderSystem__setSeparateSceneBlending__SWIG_0(swigCPtr, this, sourceFactor.swigValue(), destFactor.swigValue(), sourceFactorAlpha.swigValue(), destFactorAlpha.swigValue(), op.swigValue(), alphaOp.swigValue());
  }

  public void _setSeparateSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha, SceneBlendOperation op) {
    OgreJNI.RenderSystem__setSeparateSceneBlending__SWIG_1(swigCPtr, this, sourceFactor.swigValue(), destFactor.swigValue(), sourceFactorAlpha.swigValue(), destFactorAlpha.swigValue(), op.swigValue());
  }

  public void _setSeparateSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha) {
    OgreJNI.RenderSystem__setSeparateSceneBlending__SWIG_2(swigCPtr, this, sourceFactor.swigValue(), destFactor.swigValue(), sourceFactorAlpha.swigValue(), destFactorAlpha.swigValue());
  }

  public void _setAlphaRejectSettings(CompareFunction func, short value, boolean alphaToCoverage) {
    OgreJNI.RenderSystem__setAlphaRejectSettings(swigCPtr, this, func.swigValue(), value, alphaToCoverage);
  }

  public void _setTextureProjectionRelativeTo(boolean enabled, Vector3 pos) {
    OgreJNI.RenderSystem__setTextureProjectionRelativeTo(swigCPtr, this, enabled, Vector3.getCPtr(pos), pos);
  }

  public SWIGTYPE_p_Ogre__DepthBuffer _createDepthBufferFor(RenderTarget renderTarget) {
    long cPtr = OgreJNI.RenderSystem__createDepthBufferFor(swigCPtr, this, RenderTarget.getCPtr(renderTarget), renderTarget);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__DepthBuffer(cPtr, false);
  }

  public void _cleanupDepthBuffers(boolean bCleanManualBuffers) {
    OgreJNI.RenderSystem__cleanupDepthBuffers__SWIG_0(swigCPtr, this, bCleanManualBuffers);
  }

  public void _cleanupDepthBuffers() {
    OgreJNI.RenderSystem__cleanupDepthBuffers__SWIG_1(swigCPtr, this);
  }

  public void _beginFrame() {
    OgreJNI.RenderSystem__beginFrame(swigCPtr, this);
  }

  static public class RenderSystemContext {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected RenderSystemContext(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(RenderSystemContext obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_RenderSystem_RenderSystemContext(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public RenderSystemContext() {
      this(OgreJNI.new_RenderSystem_RenderSystemContext(), true);
    }
  
  }

  public RenderSystem.RenderSystemContext _pauseFrame() {
    long cPtr = OgreJNI.RenderSystem__pauseFrame(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderSystem.RenderSystemContext(cPtr, false);
  }

  public void _resumeFrame(RenderSystem.RenderSystemContext context) {
    OgreJNI.RenderSystem__resumeFrame(swigCPtr, this, RenderSystem.RenderSystemContext.getCPtr(context), context);
  }

  public void _endFrame() {
    OgreJNI.RenderSystem__endFrame(swigCPtr, this);
  }

  public void _setViewport(Viewport vp) {
    OgreJNI.RenderSystem__setViewport(swigCPtr, this, Viewport.getCPtr(vp), vp);
  }

  public Viewport _getViewport() {
    long cPtr = OgreJNI.RenderSystem__getViewport(swigCPtr, this);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public void _setCullingMode(CullingMode mode) {
    OgreJNI.RenderSystem__setCullingMode(swigCPtr, this, mode.swigValue());
  }

  public CullingMode _getCullingMode() {
    return CullingMode.swigToEnum(OgreJNI.RenderSystem__getCullingMode(swigCPtr, this));
  }

  public void _setDepthBufferParams(boolean depthTest, boolean depthWrite, CompareFunction depthFunction) {
    OgreJNI.RenderSystem__setDepthBufferParams__SWIG_0(swigCPtr, this, depthTest, depthWrite, depthFunction.swigValue());
  }

  public void _setDepthBufferParams(boolean depthTest, boolean depthWrite) {
    OgreJNI.RenderSystem__setDepthBufferParams__SWIG_1(swigCPtr, this, depthTest, depthWrite);
  }

  public void _setDepthBufferParams(boolean depthTest) {
    OgreJNI.RenderSystem__setDepthBufferParams__SWIG_2(swigCPtr, this, depthTest);
  }

  public void _setDepthBufferParams() {
    OgreJNI.RenderSystem__setDepthBufferParams__SWIG_3(swigCPtr, this);
  }

  public void _setDepthBufferCheckEnabled(boolean enabled) {
    OgreJNI.RenderSystem__setDepthBufferCheckEnabled__SWIG_0(swigCPtr, this, enabled);
  }

  public void _setDepthBufferCheckEnabled() {
    OgreJNI.RenderSystem__setDepthBufferCheckEnabled__SWIG_1(swigCPtr, this);
  }

  public void _setDepthBufferWriteEnabled(boolean enabled) {
    OgreJNI.RenderSystem__setDepthBufferWriteEnabled__SWIG_0(swigCPtr, this, enabled);
  }

  public void _setDepthBufferWriteEnabled() {
    OgreJNI.RenderSystem__setDepthBufferWriteEnabled__SWIG_1(swigCPtr, this);
  }

  public void _setDepthBufferFunction(CompareFunction func) {
    OgreJNI.RenderSystem__setDepthBufferFunction__SWIG_0(swigCPtr, this, func.swigValue());
  }

  public void _setDepthBufferFunction() {
    OgreJNI.RenderSystem__setDepthBufferFunction__SWIG_1(swigCPtr, this);
  }

  public void _setColourBufferWriteEnabled(boolean red, boolean green, boolean blue, boolean alpha) {
    OgreJNI.RenderSystem__setColourBufferWriteEnabled(swigCPtr, this, red, green, blue, alpha);
  }

  public void _setDepthBias(float constantBias, float slopeScaleBias) {
    OgreJNI.RenderSystem__setDepthBias__SWIG_0(swigCPtr, this, constantBias, slopeScaleBias);
  }

  public void _setDepthBias(float constantBias) {
    OgreJNI.RenderSystem__setDepthBias__SWIG_1(swigCPtr, this, constantBias);
  }

  public void _beginGeometryCount() {
    OgreJNI.RenderSystem__beginGeometryCount(swigCPtr, this);
  }

  public long _getFaceCount() {
    return OgreJNI.RenderSystem__getFaceCount(swigCPtr, this);
  }

  public long _getBatchCount() {
    return OgreJNI.RenderSystem__getBatchCount(swigCPtr, this);
  }

  public long _getVertexCount() {
    return OgreJNI.RenderSystem__getVertexCount(swigCPtr, this);
  }

  public void convertColourValue(ColourValue colour, SWIGTYPE_p_unsigned_int pDest) {
    OgreJNI.RenderSystem_convertColourValue(swigCPtr, this, ColourValue.getCPtr(colour), colour, SWIGTYPE_p_unsigned_int.getCPtr(pDest));
  }

  public VertexElementType getColourVertexElementType() {
    return VertexElementType.swigToEnum(OgreJNI.RenderSystem_getColourVertexElementType(swigCPtr, this));
  }

  public void _convertProjectionMatrix(Matrix4 matrix, Matrix4 dest, boolean forGpuProgram) {
    OgreJNI.RenderSystem__convertProjectionMatrix__SWIG_0(swigCPtr, this, Matrix4.getCPtr(matrix), matrix, Matrix4.getCPtr(dest), dest, forGpuProgram);
  }

  public void _convertProjectionMatrix(Matrix4 matrix, Matrix4 dest) {
    OgreJNI.RenderSystem__convertProjectionMatrix__SWIG_1(swigCPtr, this, Matrix4.getCPtr(matrix), matrix, Matrix4.getCPtr(dest), dest);
  }

  public void _setPolygonMode(PolygonMode level) {
    OgreJNI.RenderSystem__setPolygonMode(swigCPtr, this, level.swigValue());
  }

  public void setStencilCheckEnabled(boolean enabled) {
    OgreJNI.RenderSystem_setStencilCheckEnabled(swigCPtr, this, enabled);
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask, StencilOperation stencilFailOp, StencilOperation depthFailOp, StencilOperation passOp, boolean twoSidedOperation, boolean readBackAsTexture) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_0(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask, stencilFailOp.swigValue(), depthFailOp.swigValue(), passOp.swigValue(), twoSidedOperation, readBackAsTexture);
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask, StencilOperation stencilFailOp, StencilOperation depthFailOp, StencilOperation passOp, boolean twoSidedOperation) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_1(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask, stencilFailOp.swigValue(), depthFailOp.swigValue(), passOp.swigValue(), twoSidedOperation);
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask, StencilOperation stencilFailOp, StencilOperation depthFailOp, StencilOperation passOp) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_2(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask, stencilFailOp.swigValue(), depthFailOp.swigValue(), passOp.swigValue());
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask, StencilOperation stencilFailOp, StencilOperation depthFailOp) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_3(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask, stencilFailOp.swigValue(), depthFailOp.swigValue());
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask, StencilOperation stencilFailOp) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_4(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask, stencilFailOp.swigValue());
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask, long writeMask) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_5(swigCPtr, this, func.swigValue(), refValue, compareMask, writeMask);
  }

  public void setStencilBufferParams(CompareFunction func, long refValue, long compareMask) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_6(swigCPtr, this, func.swigValue(), refValue, compareMask);
  }

  public void setStencilBufferParams(CompareFunction func, long refValue) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_7(swigCPtr, this, func.swigValue(), refValue);
  }

  public void setStencilBufferParams(CompareFunction func) {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_8(swigCPtr, this, func.swigValue());
  }

  public void setStencilBufferParams() {
    OgreJNI.RenderSystem_setStencilBufferParams__SWIG_9(swigCPtr, this);
  }

  public void setStencilState(StencilState state) {
    OgreJNI.RenderSystem_setStencilState(swigCPtr, this, StencilState.getCPtr(state), state);
  }

  public void setNormaliseNormals(boolean normalise) {
    OgreJNI.RenderSystem_setNormaliseNormals(swigCPtr, this, normalise);
  }

  public void _render(RenderOperation op) {
    OgreJNI.RenderSystem__render(swigCPtr, this, RenderOperation.getCPtr(op), op);
  }

  public void _dispatchCompute(Vector3i workgroupDim) {
    OgreJNI.RenderSystem__dispatchCompute(swigCPtr, this, Vector3i.getCPtr(workgroupDim), workgroupDim);
  }

  public RenderSystemCapabilities getCapabilities() {
    long cPtr = OgreJNI.RenderSystem_getCapabilities(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderSystemCapabilities(cPtr, false);
  }

  public DriverVersion getDriverVersion() {
    return new DriverVersion(OgreJNI.RenderSystem_getDriverVersion(swigCPtr, this), false);
  }

  public String _getDefaultViewportMaterialScheme() {
    return OgreJNI.RenderSystem__getDefaultViewportMaterialScheme(swigCPtr, this);
  }

  public void bindGpuProgram(GpuProgram prg) {
    OgreJNI.RenderSystem_bindGpuProgram(swigCPtr, this, GpuProgram.getCPtr(prg), prg);
  }

  public void bindGpuProgramParameters(GpuProgramType gptype, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t params, int variabilityMask) {
    OgreJNI.RenderSystem_bindGpuProgramParameters(swigCPtr, this, gptype.swigValue(), SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t.getCPtr(params), variabilityMask);
  }

  public void bindGpuProgramPassIterationParameters(GpuProgramType gptype) {
    OgreJNI.RenderSystem_bindGpuProgramPassIterationParameters(swigCPtr, this, gptype.swigValue());
  }

  public void unbindGpuProgram(GpuProgramType gptype) {
    OgreJNI.RenderSystem_unbindGpuProgram(swigCPtr, this, gptype.swigValue());
  }

  public boolean isGpuProgramBound(GpuProgramType gptype) {
    return OgreJNI.RenderSystem_isGpuProgramBound(swigCPtr, this, gptype.swigValue());
  }

  public int getNativeShadingLanguageVersion() {
    return OgreJNI.RenderSystem_getNativeShadingLanguageVersion(swigCPtr, this);
  }

  public void setClipPlanes(SWIGTYPE_p_std__vectorT_Ogre__Plane_t clipPlanes) {
    OgreJNI.RenderSystem_setClipPlanes(swigCPtr, this, SWIGTYPE_p_std__vectorT_Ogre__Plane_t.getCPtr(clipPlanes));
  }

  public void _initRenderTargets() {
    OgreJNI.RenderSystem__initRenderTargets(swigCPtr, this);
  }

  public void _notifyCameraRemoved(Camera cam) {
    OgreJNI.RenderSystem__notifyCameraRemoved(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void _updateAllRenderTargets(boolean swapBuffers) {
    OgreJNI.RenderSystem__updateAllRenderTargets__SWIG_0(swigCPtr, this, swapBuffers);
  }

  public void _updateAllRenderTargets() {
    OgreJNI.RenderSystem__updateAllRenderTargets__SWIG_1(swigCPtr, this);
  }

  public void _swapAllRenderTargetBuffers() {
    OgreJNI.RenderSystem__swapAllRenderTargetBuffers(swigCPtr, this);
  }

  public void setInvertVertexWinding(boolean invert) {
    OgreJNI.RenderSystem_setInvertVertexWinding(swigCPtr, this, invert);
  }

  public boolean getInvertVertexWinding() {
    return OgreJNI.RenderSystem_getInvertVertexWinding(swigCPtr, this);
  }

  public void setScissorTest(boolean enabled, Rect rect) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_0(swigCPtr, this, enabled, Rect.getCPtr(rect), rect);
  }

  public void setScissorTest(boolean enabled) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_1(swigCPtr, this, enabled);
  }

  public void setScissorTest(boolean enabled, long left, long top, long right, long bottom) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_2(swigCPtr, this, enabled, left, top, right, bottom);
  }

  public void setScissorTest(boolean enabled, long left, long top, long right) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_3(swigCPtr, this, enabled, left, top, right);
  }

  public void setScissorTest(boolean enabled, long left, long top) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_4(swigCPtr, this, enabled, left, top);
  }

  public void setScissorTest(boolean enabled, long left) {
    OgreJNI.RenderSystem_setScissorTest__SWIG_5(swigCPtr, this, enabled, left);
  }

  public void clearFrameBuffer(long buffers, ColourValue colour, float depth, int stencil) {
    OgreJNI.RenderSystem_clearFrameBuffer__SWIG_0(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour, depth, stencil);
  }

  public void clearFrameBuffer(long buffers, ColourValue colour, float depth) {
    OgreJNI.RenderSystem_clearFrameBuffer__SWIG_1(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour, depth);
  }

  public void clearFrameBuffer(long buffers, ColourValue colour) {
    OgreJNI.RenderSystem_clearFrameBuffer__SWIG_2(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour);
  }

  public void clearFrameBuffer(long buffers) {
    OgreJNI.RenderSystem_clearFrameBuffer__SWIG_3(swigCPtr, this, buffers);
  }

  public float getHorizontalTexelOffset() {
    return OgreJNI.RenderSystem_getHorizontalTexelOffset(swigCPtr, this);
  }

  public float getVerticalTexelOffset() {
    return OgreJNI.RenderSystem_getVerticalTexelOffset(swigCPtr, this);
  }

  public float getMinimumDepthInputValue() {
    return OgreJNI.RenderSystem_getMinimumDepthInputValue(swigCPtr, this);
  }

  public float getMaximumDepthInputValue() {
    return OgreJNI.RenderSystem_getMaximumDepthInputValue(swigCPtr, this);
  }

  public void setCurrentPassIterationCount(long count) {
    OgreJNI.RenderSystem_setCurrentPassIterationCount(swigCPtr, this, count);
  }

  public void setDeriveDepthBias(boolean derive, float baseValue, float multiplier, float slopeScale) {
    OgreJNI.RenderSystem_setDeriveDepthBias__SWIG_0(swigCPtr, this, derive, baseValue, multiplier, slopeScale);
  }

  public void setDeriveDepthBias(boolean derive, float baseValue, float multiplier) {
    OgreJNI.RenderSystem_setDeriveDepthBias__SWIG_1(swigCPtr, this, derive, baseValue, multiplier);
  }

  public void setDeriveDepthBias(boolean derive, float baseValue) {
    OgreJNI.RenderSystem_setDeriveDepthBias__SWIG_2(swigCPtr, this, derive, baseValue);
  }

  public void setDeriveDepthBias(boolean derive) {
    OgreJNI.RenderSystem_setDeriveDepthBias__SWIG_3(swigCPtr, this, derive);
  }

  public void _setRenderTarget(RenderTarget target) {
    OgreJNI.RenderSystem__setRenderTarget(swigCPtr, this, RenderTarget.getCPtr(target), target);
  }

  static public class Listener {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Listener(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Listener obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_RenderSystem_Listener(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    protected void swigDirectorDisconnect() {
      swigCMemOwn = false;
      delete();
    }
  
    public void swigReleaseOwnership() {
      swigCMemOwn = false;
      OgreJNI.RenderSystem_Listener_change_ownership(this, swigCPtr, false);
    }
  
    public void swigTakeOwnership() {
      swigCMemOwn = true;
      OgreJNI.RenderSystem_Listener_change_ownership(this, swigCPtr, true);
    }
  
    public Listener() {
      this(OgreJNI.new_RenderSystem_Listener(), true);
      OgreJNI.RenderSystem_Listener_director_connect(this, swigCPtr, swigCMemOwn, true);
    }
  
    public void eventOccurred(String eventName, NameValuePairList parameters) {
      OgreJNI.RenderSystem_Listener_eventOccurred__SWIG_0(swigCPtr, this, eventName, NameValuePairList.getCPtr(parameters), parameters);
    }
  
    public void eventOccurred(String eventName) {
      OgreJNI.RenderSystem_Listener_eventOccurred__SWIG_1(swigCPtr, this, eventName);
    }
  
  }

  public static void setSharedListener(RenderSystem.Listener listener) {
    OgreJNI.RenderSystem_setSharedListener(RenderSystem.Listener.getCPtr(listener), listener);
  }

  public static RenderSystem.Listener getSharedListener() {
    long cPtr = OgreJNI.RenderSystem_getSharedListener();
    return (cPtr == 0) ? null : new RenderSystem.Listener(cPtr, false);
  }

  public void addListener(RenderSystem.Listener l) {
    OgreJNI.RenderSystem_addListener(swigCPtr, this, RenderSystem.Listener.getCPtr(l), l);
  }

  public void removeListener(RenderSystem.Listener l) {
    OgreJNI.RenderSystem_removeListener(swigCPtr, this, RenderSystem.Listener.getCPtr(l), l);
  }

  public StringVector getRenderSystemEvents() {
    return new StringVector(OgreJNI.RenderSystem_getRenderSystemEvents(swigCPtr, this), false);
  }

  public void preExtraThreadsStarted() {
    OgreJNI.RenderSystem_preExtraThreadsStarted(swigCPtr, this);
  }

  public void postExtraThreadsStarted() {
    OgreJNI.RenderSystem_postExtraThreadsStarted(swigCPtr, this);
  }

  public void registerThread() {
    OgreJNI.RenderSystem_registerThread(swigCPtr, this);
  }

  public void unregisterThread() {
    OgreJNI.RenderSystem_unregisterThread(swigCPtr, this);
  }

  public long getDisplayMonitorCount() {
    return OgreJNI.RenderSystem_getDisplayMonitorCount(swigCPtr, this);
  }

  public void beginProfileEvent(String eventName) {
    OgreJNI.RenderSystem_beginProfileEvent(swigCPtr, this, eventName);
  }

  public void endProfileEvent() {
    OgreJNI.RenderSystem_endProfileEvent(swigCPtr, this);
  }

  public void markProfileEvent(String event) {
    OgreJNI.RenderSystem_markProfileEvent(swigCPtr, this, event);
  }

  public void getCustomAttribute(String name, SWIGTYPE_p_void pData) {
    OgreJNI.RenderSystem_getCustomAttribute(swigCPtr, this, name, SWIGTYPE_p_void.getCPtr(pData));
  }

  public boolean setDrawBuffer(ColourBufferType colourBuffer) {
    return OgreJNI.RenderSystem_setDrawBuffer(swigCPtr, this, colourBuffer.swigValue());
  }

}
