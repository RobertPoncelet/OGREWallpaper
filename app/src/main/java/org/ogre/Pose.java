/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class Pose {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Pose(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Pose obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Pose(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Pose(int target, String name) {
    this(OgreJNI.new_Pose__SWIG_0(target, name), true);
  }

  public Pose(int target) {
    this(OgreJNI.new_Pose__SWIG_1(target), true);
  }

  public String getName() {
    return OgreJNI.Pose_getName(swigCPtr, this);
  }

  public int getTarget() {
    return OgreJNI.Pose_getTarget(swigCPtr, this);
  }

  public boolean getIncludesNormals() {
    return OgreJNI.Pose_getIncludesNormals(swigCPtr, this);
  }

  public void addVertex(long index, Vector3 offset) {
    OgreJNI.Pose_addVertex__SWIG_0(swigCPtr, this, index, Vector3.getCPtr(offset), offset);
  }

  public void addVertex(long index, Vector3 offset, Vector3 normal) {
    OgreJNI.Pose_addVertex__SWIG_1(swigCPtr, this, index, Vector3.getCPtr(offset), offset, Vector3.getCPtr(normal), normal);
  }

  public void removeVertex(long index) {
    OgreJNI.Pose_removeVertex(swigCPtr, this, index);
  }

  public void clearVertices() {
    OgreJNI.Pose_clearVertices(swigCPtr, this);
  }

  public SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t getVertexOffsets() {
    return new SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t(OgreJNI.Pose_getVertexOffsets(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t getNormals() {
    return new SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t(OgreJNI.Pose_getNormals(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t _getVertexOffsets() {
    return new SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t(OgreJNI.Pose__getVertexOffsets(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t _getNormals() {
    return new SWIGTYPE_p_std__mapT_size_t_Ogre__VectorT_3_Ogre__Real_t_t(OgreJNI.Pose__getNormals(swigCPtr, this), false);
  }

  public HardwareVertexBufferPtr _getHardwareVertexBuffer(VertexData origData) {
    return new HardwareVertexBufferPtr(OgreJNI.Pose__getHardwareVertexBuffer(swigCPtr, this, VertexData.getCPtr(origData), origData), false);
  }

  public Pose clone() {
    long cPtr = OgreJNI.Pose_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Pose(cPtr, false);
  }

}
