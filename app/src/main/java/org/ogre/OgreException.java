/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class OgreException {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OgreException(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OgreException obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_OgreException(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public OgreException(int number, String description, String source) {
    this(OgreJNI.new_OgreException__SWIG_0(number, description, source), true);
  }

  public OgreException(int number, String description, String source, String type, String file, int line) {
    this(OgreJNI.new_OgreException__SWIG_1(number, description, source, type, file, line), true);
  }

  public OgreException(OgreException rhs) {
    this(OgreJNI.new_OgreException__SWIG_2(OgreException.getCPtr(rhs), rhs), true);
  }

  public String getFullDescription() {
    return OgreJNI.OgreException_getFullDescription(swigCPtr, this);
  }

  public String getSource() {
    return OgreJNI.OgreException_getSource(swigCPtr, this);
  }

  public String getFile() {
    return OgreJNI.OgreException_getFile(swigCPtr, this);
  }

  public int getLine() {
    return OgreJNI.OgreException_getLine(swigCPtr, this);
  }

  public String getDescription() {
    return OgreJNI.OgreException_getDescription(swigCPtr, this);
  }

  public String what() {
    return OgreJNI.OgreException_what(swigCPtr, this);
  }

  public enum ExceptionCodes {
    ERR_CANNOT_WRITE_TO_FILE,
    ERR_INVALID_STATE,
    ERR_INVALIDPARAMS,
    ERR_RENDERINGAPI_ERROR,
    ERR_DUPLICATE_ITEM,
    ERR_ITEM_NOT_FOUND(OgreJNI.OgreException_ERR_ITEM_NOT_FOUND_get()),
    ERR_FILE_NOT_FOUND,
    ERR_INTERNAL_ERROR,
    ERR_RT_ASSERTION_FAILED,
    ERR_NOT_IMPLEMENTED,
    ERR_INVALID_CALL;

    public final int swigValue() {
      return swigValue;
    }

    public static ExceptionCodes swigToEnum(int swigValue) {
      ExceptionCodes[] swigValues = ExceptionCodes.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ExceptionCodes swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ExceptionCodes.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ExceptionCodes() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ExceptionCodes(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ExceptionCodes(ExceptionCodes swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
