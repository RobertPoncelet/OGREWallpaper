/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Ogre_WRAP_H_
#define SWIG_Ogre_WRAP_H_

class SwigDirector_FrameListener : public Ogre::FrameListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_FrameListener(JNIEnv *jenv);
    virtual bool frameStarted(Ogre::FrameEvent const &evt);
    virtual bool frameRenderingQueued(Ogre::FrameEvent const &evt);
    virtual bool frameEnded(Ogre::FrameEvent const &evt);
    virtual ~SwigDirector_FrameListener();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_LodListener : public Ogre::LodListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_LodListener(JNIEnv *jenv);
    virtual ~SwigDirector_LodListener();
    virtual bool prequeueMovableObjectLodChanged(Ogre::MovableObjectLodChangedEvent const &evt);
    virtual void postqueueMovableObjectLodChanged(Ogre::MovableObjectLodChangedEvent const &evt);
    virtual bool prequeueEntityMeshLodChanged(Ogre::EntityMeshLodChangedEvent &evt);
    virtual void postqueueEntityMeshLodChanged(Ogre::EntityMeshLodChangedEvent const &evt);
    virtual bool prequeueEntityMaterialLodChanged(Ogre::EntityMaterialLodChangedEvent &evt);
    virtual void postqueueEntityMaterialLodChanged(Ogre::EntityMaterialLodChangedEvent const &evt);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_RenderObjectListener : public Ogre::RenderObjectListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RenderObjectListener(JNIEnv *jenv);
    virtual ~SwigDirector_RenderObjectListener();
    virtual void notifyRenderSingleObject(Ogre::Renderable *rend, Ogre::Pass const *pass, Ogre::AutoParamDataSource const *source, Ogre::LightList const *pLightList, bool suppressRenderStateChanges);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_RenderQueueListener : public Ogre::RenderQueueListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RenderQueueListener(JNIEnv *jenv);
    virtual ~SwigDirector_RenderQueueListener();
    virtual void preRenderQueues();
    virtual void postRenderQueues();
    virtual void renderQueueStarted(Ogre::uint8 queueGroupId, Ogre::String const &invocation, bool &skipThisInvocation);
    virtual void renderQueueEnded(Ogre::uint8 queueGroupId, Ogre::String const &invocation, bool &repeatThisInvocation);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_RenderTargetListener : public Ogre::RenderTargetListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RenderTargetListener(JNIEnv *jenv);
    virtual ~SwigDirector_RenderTargetListener();
    virtual void preRenderTargetUpdate(Ogre::RenderTargetEvent const &evt);
    virtual void postRenderTargetUpdate(Ogre::RenderTargetEvent const &evt);
    virtual void preViewportUpdate(Ogre::RenderTargetViewportEvent const &evt);
    virtual void postViewportUpdate(Ogre::RenderTargetViewportEvent const &evt);
    virtual void viewportAdded(Ogre::RenderTargetViewportEvent const &evt);
    virtual void viewportRemoved(Ogre::RenderTargetViewportEvent const &evt);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_Resource_Listener : public Ogre::Resource::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Resource_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Resource_Listener();
    virtual void loadingComplete(Ogre::Resource *arg0);
    virtual void preparingComplete(Ogre::Resource *arg0);
    virtual void unloadingComplete(Ogre::Resource *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_ResourceBackgroundQueue_Listener : public Ogre::ResourceBackgroundQueue::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ResourceBackgroundQueue_Listener(JNIEnv *jenv);
    virtual void operationCompleted(Ogre::BackgroundProcessTicket ticket, Ogre::BackgroundProcessResult const &result);
    virtual ~SwigDirector_ResourceBackgroundQueue_Listener();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ResourceLoadingListener : public Ogre::ResourceLoadingListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ResourceLoadingListener(JNIEnv *jenv);
    virtual ~SwigDirector_ResourceLoadingListener();
    virtual Ogre::DataStreamPtr resourceLoading(Ogre::String const &name, Ogre::String const &group, Ogre::Resource *resource);
    virtual void resourceStreamOpened(Ogre::String const &name, Ogre::String const &group, Ogre::Resource *resource, Ogre::DataStreamPtr &dataStream);
    virtual bool resourceCollision(Ogre::Resource *resource, Ogre::ResourceManager *resourceManager);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_AnimationTrack_Listener : public Ogre::AnimationTrack::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AnimationTrack_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_AnimationTrack_Listener();
    virtual bool getInterpolatedKeyFrame(Ogre::AnimationTrack const *t, Ogre::TimeIndex const &timeIndex, Ogre::KeyFrame *kf);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_RenderSystem_Listener : public Ogre::RenderSystem::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RenderSystem_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_RenderSystem_Listener();
    virtual void eventOccurred(Ogre::String const &eventName, Ogre::NameValuePairList const *parameters = 0);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_MaterialSerializer_Listener : public Ogre::MaterialSerializer::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MaterialSerializer_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MaterialSerializer_Listener();
    virtual void materialEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Material const *mat);
    virtual void techniqueEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Technique const *tech);
    virtual void passEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Pass const *pass);
    virtual void textureUnitStateEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::TextureUnitState const *textureUnit);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_MaterialManager_MaterialManager_Listener : public Ogre::MaterialManager::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MaterialManager_MaterialManager_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MaterialManager_MaterialManager_Listener();
    virtual Ogre::Technique *handleSchemeNotFound(unsigned short schemeIndex, Ogre::String const &schemeName, Ogre::Material *originalMaterial, unsigned short lodIndex, Ogre::Renderable const *rend);
    virtual bool afterIlluminationPassesCreated(Ogre::Technique *technique);
    virtual bool beforeIlluminationPassesCleared(Ogre::Technique *technique);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_MovableObject_Listener : public Ogre::MovableObject::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MovableObject_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MovableObject_Listener();
    virtual void objectDestroyed(Ogre::MovableObject *arg0);
    virtual void objectAttached(Ogre::MovableObject *arg0);
    virtual void objectDetached(Ogre::MovableObject *arg0);
    virtual void objectMoved(Ogre::MovableObject *arg0);
    virtual bool objectRendering(Ogre::MovableObject const *arg0, Ogre::Camera const *arg1);
    virtual Ogre::LightList const *objectQueryLights(Ogre::MovableObject const *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_Node_Listener : public Ogre::Node::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Node_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Node_Listener();
    virtual void nodeUpdated(Ogre::Node const *arg0);
    virtual void nodeDestroyed(Ogre::Node const *arg0);
    virtual void nodeAttached(Ogre::Node const *arg0);
    virtual void nodeDetached(Ogre::Node const *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_Camera_Listener : public Ogre::Camera::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Camera_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Camera_Listener();
    virtual void cameraPreRenderScene(Ogre::Camera *cam);
    virtual void cameraPostRenderScene(Ogre::Camera *cam);
    virtual void cameraDestroyed(Ogre::Camera *cam);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_MeshSerializerListener : public Ogre::MeshSerializerListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MeshSerializerListener(JNIEnv *jenv);
    virtual ~SwigDirector_MeshSerializerListener();
    virtual void processMaterialName(Ogre::Mesh *mesh, Ogre::String *name);
    virtual void processSkeletonName(Ogre::Mesh *mesh, Ogre::String *name);
    virtual void processMeshCompleted(Ogre::Mesh *mesh);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_Viewport_Listener : public Ogre::Viewport::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Viewport_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Viewport_Listener();
    virtual void viewportCameraChanged(Ogre::Viewport *viewport);
    virtual void viewportDimensionsChanged(Ogre::Viewport *viewport);
    virtual void viewportDestroyed(Ogre::Viewport *viewport);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_SceneManager_Listener : public Ogre::SceneManager::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SceneManager_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_SceneManager_Listener();
    virtual void preUpdateSceneGraph(Ogre::SceneManager *source, Ogre::Camera *camera);
    virtual void postUpdateSceneGraph(Ogre::SceneManager *source, Ogre::Camera *camera);
    virtual void preFindVisibleObjects(Ogre::SceneManager *source, Ogre::SceneManager::IlluminationRenderStage irs, Ogre::Viewport *v);
    virtual void postFindVisibleObjects(Ogre::SceneManager *source, Ogre::SceneManager::IlluminationRenderStage irs, Ogre::Viewport *v);
    virtual void shadowTexturesUpdated(size_t numberOfShadowTextures);
    virtual void shadowTextureCasterPreViewProj(Ogre::Light *light, Ogre::Camera *camera, size_t iteration);
    virtual void shadowTextureReceiverPreViewProj(Ogre::Light *light, Ogre::Frustum *frustum);
    virtual bool sortLightsAffectingFrustum(Ogre::LightList &lightList);
    virtual void sceneManagerDestroyed(Ogre::SceneManager *source);
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<9> swig_override;
};


#endif
