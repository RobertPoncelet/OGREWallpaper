/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public class ParticleSystemPtr {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ParticleSystemPtr(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParticleSystemPtr obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_ParticleSystemPtr(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ParticleSystemPtr(SWIGTYPE_p_std__nullptr_t arg0) {
    this(OgreJNI.new_ParticleSystemPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true);
  }

  public ParticleSystemPtr() {
    this(OgreJNI.new_ParticleSystemPtr__SWIG_1(), true);
  }

  public ParticleSystemPtr(ParticleSystemPtr r) {
    this(OgreJNI.new_ParticleSystemPtr__SWIG_2(ParticleSystemPtr.getCPtr(r), r), true);
  }

  public ParticleSystem __deref__() {
    long cPtr = OgreJNI.ParticleSystemPtr___deref__(swigCPtr, this);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public void setRenderer(String typeName) {
    OgreJNI.ParticleSystemPtr_setRenderer(swigCPtr, this, typeName);
  }

  public SWIGTYPE_p_Ogre__ParticleSystemRenderer getRenderer() {
    long cPtr = OgreJNI.ParticleSystemPtr_getRenderer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__ParticleSystemRenderer(cPtr, false);
  }

  public String getRendererName() {
    return OgreJNI.ParticleSystemPtr_getRendererName(swigCPtr, this);
  }

  public ParticleEmitter addEmitter(String emitterType) {
    long cPtr = OgreJNI.ParticleSystemPtr_addEmitter(swigCPtr, this, emitterType);
    return (cPtr == 0) ? null : new ParticleEmitter(cPtr, false);
  }

  public ParticleEmitter getEmitter(int index) {
    long cPtr = OgreJNI.ParticleSystemPtr_getEmitter(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ParticleEmitter(cPtr, false);
  }

  public int getNumEmitters() {
    return OgreJNI.ParticleSystemPtr_getNumEmitters(swigCPtr, this);
  }

  public void removeEmitter(int index) {
    OgreJNI.ParticleSystemPtr_removeEmitter__SWIG_0(swigCPtr, this, index);
  }

  public void removeEmitter(ParticleEmitter emitter) {
    OgreJNI.ParticleSystemPtr_removeEmitter__SWIG_1(swigCPtr, this, ParticleEmitter.getCPtr(emitter), emitter);
  }

  public void removeAllEmitters() {
    OgreJNI.ParticleSystemPtr_removeAllEmitters(swigCPtr, this);
  }

  public ParticleAffector addAffector(String affectorType) {
    long cPtr = OgreJNI.ParticleSystemPtr_addAffector(swigCPtr, this, affectorType);
    return (cPtr == 0) ? null : new ParticleAffector(cPtr, false);
  }

  public ParticleAffector getAffector(int index) {
    long cPtr = OgreJNI.ParticleSystemPtr_getAffector(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ParticleAffector(cPtr, false);
  }

  public int getNumAffectors() {
    return OgreJNI.ParticleSystemPtr_getNumAffectors(swigCPtr, this);
  }

  public void removeAffector(int index) {
    OgreJNI.ParticleSystemPtr_removeAffector(swigCPtr, this, index);
  }

  public void removeAllAffectors() {
    OgreJNI.ParticleSystemPtr_removeAllAffectors(swigCPtr, this);
  }

  public void clear() {
    OgreJNI.ParticleSystemPtr_clear(swigCPtr, this);
  }

  public long getNumParticles() {
    return OgreJNI.ParticleSystemPtr_getNumParticles(swigCPtr, this);
  }

  public Particle createParticle() {
    long cPtr = OgreJNI.ParticleSystemPtr_createParticle(swigCPtr, this);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public Particle createEmitterParticle(String emitterName) {
    long cPtr = OgreJNI.ParticleSystemPtr_createEmitterParticle(swigCPtr, this, emitterName);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public Particle getParticle(long index) {
    long cPtr = OgreJNI.ParticleSystemPtr_getParticle(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public long getParticleQuota() {
    return OgreJNI.ParticleSystemPtr_getParticleQuota(swigCPtr, this);
  }

  public void setParticleQuota(long quota) {
    OgreJNI.ParticleSystemPtr_setParticleQuota(swigCPtr, this, quota);
  }

  public long getEmittedEmitterQuota() {
    return OgreJNI.ParticleSystemPtr_getEmittedEmitterQuota(swigCPtr, this);
  }

  public void setEmittedEmitterQuota(long quota) {
    OgreJNI.ParticleSystemPtr_setEmittedEmitterQuota(swigCPtr, this, quota);
  }

  public void _update(float timeElapsed) {
    OgreJNI.ParticleSystemPtr__update(swigCPtr, this, timeElapsed);
  }

  public SWIGTYPE_p_std__listT_Ogre__Particle_p_t _getActiveParticles() {
    return new SWIGTYPE_p_std__listT_Ogre__Particle_p_t(OgreJNI.ParticleSystemPtr__getActiveParticles(swigCPtr, this), false);
  }

  public void setMaterialName(String name, String groupName) {
    OgreJNI.ParticleSystemPtr_setMaterialName__SWIG_0(swigCPtr, this, name, groupName);
  }

  public void setMaterialName(String name) {
    OgreJNI.ParticleSystemPtr_setMaterialName__SWIG_1(swigCPtr, this, name);
  }

  public String getMaterialName() {
    return OgreJNI.ParticleSystemPtr_getMaterialName(swigCPtr, this);
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgreJNI.ParticleSystemPtr__notifyCurrentCamera(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void _notifyAttached(Node parent, boolean isTagPoint) {
    OgreJNI.ParticleSystemPtr__notifyAttached__SWIG_0(swigCPtr, this, Node.getCPtr(parent), parent, isTagPoint);
  }

  public void _notifyAttached(Node parent) {
    OgreJNI.ParticleSystemPtr__notifyAttached__SWIG_1(swigCPtr, this, Node.getCPtr(parent), parent);
  }

  public AxisAlignedBox getBoundingBox() {
    return new AxisAlignedBox(OgreJNI.ParticleSystemPtr_getBoundingBox(swigCPtr, this), false);
  }

  public float getBoundingRadius() {
    return OgreJNI.ParticleSystemPtr_getBoundingRadius(swigCPtr, this);
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgreJNI.ParticleSystemPtr__updateRenderQueue(swigCPtr, this, RenderQueue.getCPtr(queue), queue);
  }

  public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
    OgreJNI.ParticleSystemPtr_visitRenderables__SWIG_0(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgreJNI.ParticleSystemPtr_visitRenderables__SWIG_1(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor);
  }

  public void fastForward(float time, float interval) {
    OgreJNI.ParticleSystemPtr_fastForward__SWIG_0(swigCPtr, this, time, interval);
  }

  public void fastForward(float time) {
    OgreJNI.ParticleSystemPtr_fastForward__SWIG_1(swigCPtr, this, time);
  }

  public void setSpeedFactor(float speedFactor) {
    OgreJNI.ParticleSystemPtr_setSpeedFactor(swigCPtr, this, speedFactor);
  }

  public float getSpeedFactor() {
    return OgreJNI.ParticleSystemPtr_getSpeedFactor(swigCPtr, this);
  }

  public void setIterationInterval(float iterationInterval) {
    OgreJNI.ParticleSystemPtr_setIterationInterval(swigCPtr, this, iterationInterval);
  }

  public float getIterationInterval() {
    return OgreJNI.ParticleSystemPtr_getIterationInterval(swigCPtr, this);
  }

  public void setDefaultIterationInterval(float iterationInterval) {
    OgreJNI.ParticleSystemPtr_setDefaultIterationInterval(swigCPtr, this, iterationInterval);
  }

  public float getDefaultIterationInterval() {
    return OgreJNI.ParticleSystemPtr_getDefaultIterationInterval(swigCPtr, this);
  }

  public void setNonVisibleUpdateTimeout(float timeout) {
    OgreJNI.ParticleSystemPtr_setNonVisibleUpdateTimeout(swigCPtr, this, timeout);
  }

  public float getNonVisibleUpdateTimeout() {
    return OgreJNI.ParticleSystemPtr_getNonVisibleUpdateTimeout(swigCPtr, this);
  }

  public void setDefaultNonVisibleUpdateTimeout(float timeout) {
    OgreJNI.ParticleSystemPtr_setDefaultNonVisibleUpdateTimeout(swigCPtr, this, timeout);
  }

  public float getDefaultNonVisibleUpdateTimeout() {
    return OgreJNI.ParticleSystemPtr_getDefaultNonVisibleUpdateTimeout(swigCPtr, this);
  }

  public String getMovableType() {
    return OgreJNI.ParticleSystemPtr_getMovableType(swigCPtr, this);
  }

  public void _notifyParticleResized() {
    OgreJNI.ParticleSystemPtr__notifyParticleResized(swigCPtr, this);
  }

  public void _notifyParticleRotated() {
    OgreJNI.ParticleSystemPtr__notifyParticleRotated(swigCPtr, this);
  }

  public void setDefaultDimensions(float width, float height) {
    OgreJNI.ParticleSystemPtr_setDefaultDimensions(swigCPtr, this, width, height);
  }

  public void setDefaultWidth(float width) {
    OgreJNI.ParticleSystemPtr_setDefaultWidth(swigCPtr, this, width);
  }

  public float getDefaultWidth() {
    return OgreJNI.ParticleSystemPtr_getDefaultWidth(swigCPtr, this);
  }

  public void setDefaultHeight(float height) {
    OgreJNI.ParticleSystemPtr_setDefaultHeight(swigCPtr, this, height);
  }

  public float getDefaultHeight() {
    return OgreJNI.ParticleSystemPtr_getDefaultHeight(swigCPtr, this);
  }

  public boolean getCullIndividually() {
    return OgreJNI.ParticleSystemPtr_getCullIndividually(swigCPtr, this);
  }

  public void setCullIndividually(boolean cullIndividual) {
    OgreJNI.ParticleSystemPtr_setCullIndividually(swigCPtr, this, cullIndividual);
  }

  public String getResourceGroupName() {
    return OgreJNI.ParticleSystemPtr_getResourceGroupName(swigCPtr, this);
  }

  public String getOrigin() {
    return OgreJNI.ParticleSystemPtr_getOrigin(swigCPtr, this);
  }

  public void _notifyOrigin(String origin) {
    OgreJNI.ParticleSystemPtr__notifyOrigin(swigCPtr, this, origin);
  }

  public void setRenderQueueGroup(short queueID) {
    OgreJNI.ParticleSystemPtr_setRenderQueueGroup(swigCPtr, this, queueID);
  }

  public void setRenderQueueGroupAndPriority(short queueID, int priority) {
    OgreJNI.ParticleSystemPtr_setRenderQueueGroupAndPriority(swigCPtr, this, queueID, priority);
  }

  public void setSortingEnabled(boolean enabled) {
    OgreJNI.ParticleSystemPtr_setSortingEnabled(swigCPtr, this, enabled);
  }

  public boolean getSortingEnabled() {
    return OgreJNI.ParticleSystemPtr_getSortingEnabled(swigCPtr, this);
  }

  public void setBounds(AxisAlignedBox aabb) {
    OgreJNI.ParticleSystemPtr_setBounds(swigCPtr, this, AxisAlignedBox.getCPtr(aabb), aabb);
  }

  public void setBoundsAutoUpdated(boolean autoUpdate, float stopIn) {
    OgreJNI.ParticleSystemPtr_setBoundsAutoUpdated__SWIG_0(swigCPtr, this, autoUpdate, stopIn);
  }

  public void setBoundsAutoUpdated(boolean autoUpdate) {
    OgreJNI.ParticleSystemPtr_setBoundsAutoUpdated__SWIG_1(swigCPtr, this, autoUpdate);
  }

  public void setKeepParticlesInLocalSpace(boolean keepLocal) {
    OgreJNI.ParticleSystemPtr_setKeepParticlesInLocalSpace(swigCPtr, this, keepLocal);
  }

  public boolean getKeepParticlesInLocalSpace() {
    return OgreJNI.ParticleSystemPtr_getKeepParticlesInLocalSpace(swigCPtr, this);
  }

  public void _updateBounds() {
    OgreJNI.ParticleSystemPtr__updateBounds(swigCPtr, this);
  }

  public void setEmitting(boolean v) {
    OgreJNI.ParticleSystemPtr_setEmitting(swigCPtr, this, v);
  }

  public boolean getEmitting() {
    return OgreJNI.ParticleSystemPtr_getEmitting(swigCPtr, this);
  }

  public long getTypeFlags() {
    return OgreJNI.ParticleSystemPtr_getTypeFlags(swigCPtr, this);
  }

  public ParamDictionary getParamDictionary() {
    long cPtr = OgreJNI.ParticleSystemPtr_getParamDictionary__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ParamDictionary(cPtr, false);
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ParameterDef_t getParameters() {
    return new SWIGTYPE_p_std__vectorT_Ogre__ParameterDef_t(OgreJNI.ParticleSystemPtr_getParameters(swigCPtr, this), false);
  }

  public boolean setParameter(String name, String value) {
    return OgreJNI.ParticleSystemPtr_setParameter(swigCPtr, this, name, value);
  }

  public void setParameterList(NameValuePairList paramList) {
    OgreJNI.ParticleSystemPtr_setParameterList(swigCPtr, this, NameValuePairList.getCPtr(paramList), paramList);
  }

  public String getParameter(String name) {
    return OgreJNI.ParticleSystemPtr_getParameter(swigCPtr, this, name);
  }

  public void copyParametersTo(StringInterface dest) {
    OgreJNI.ParticleSystemPtr_copyParametersTo(swigCPtr, this, StringInterface.getCPtr(dest), dest);
  }

  public void cleanupDictionary() {
    OgreJNI.ParticleSystemPtr_cleanupDictionary(swigCPtr, this);
  }

  public void _notifyCreator(MovableObjectFactory fact) {
    OgreJNI.ParticleSystemPtr__notifyCreator(swigCPtr, this, MovableObjectFactory.getCPtr(fact), fact);
  }

  public MovableObjectFactory _getCreator() {
    long cPtr = OgreJNI.ParticleSystemPtr__getCreator(swigCPtr, this);
    return (cPtr == 0) ? null : new MovableObjectFactory(cPtr, false);
  }

  public void _notifyManager(SceneManager man) {
    OgreJNI.ParticleSystemPtr__notifyManager(swigCPtr, this, SceneManager.getCPtr(man), man);
  }

  public SceneManager _getManager() {
    long cPtr = OgreJNI.ParticleSystemPtr__getManager(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager(cPtr, false);
  }

  public void _releaseManualHardwareResources() {
    OgreJNI.ParticleSystemPtr__releaseManualHardwareResources(swigCPtr, this);
  }

  public void _restoreManualHardwareResources() {
    OgreJNI.ParticleSystemPtr__restoreManualHardwareResources(swigCPtr, this);
  }

  public String getName() {
    return OgreJNI.ParticleSystemPtr_getName(swigCPtr, this);
  }

  public Node getParentNode() {
    long cPtr = OgreJNI.ParticleSystemPtr_getParentNode(swigCPtr, this);
    return (cPtr == 0) ? null : new Node(cPtr, false);
  }

  public SceneNode getParentSceneNode() {
    long cPtr = OgreJNI.ParticleSystemPtr_getParentSceneNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public boolean isParentTagPoint() {
    return OgreJNI.ParticleSystemPtr_isParentTagPoint(swigCPtr, this);
  }

  public boolean isAttached() {
    return OgreJNI.ParticleSystemPtr_isAttached(swigCPtr, this);
  }

  public void detachFromParent() {
    OgreJNI.ParticleSystemPtr_detachFromParent(swigCPtr, this);
  }

  public boolean isInScene() {
    return OgreJNI.ParticleSystemPtr_isInScene(swigCPtr, this);
  }

  public void _notifyMoved() {
    OgreJNI.ParticleSystemPtr__notifyMoved(swigCPtr, this);
  }

  public AxisAlignedBox getWorldBoundingBox(boolean derive) {
    return new AxisAlignedBox(OgreJNI.ParticleSystemPtr_getWorldBoundingBox__SWIG_0(swigCPtr, this, derive), false);
  }

  public AxisAlignedBox getWorldBoundingBox() {
    return new AxisAlignedBox(OgreJNI.ParticleSystemPtr_getWorldBoundingBox__SWIG_1(swigCPtr, this), false);
  }

  public Sphere getWorldBoundingSphere(boolean derive) {
    return new Sphere(OgreJNI.ParticleSystemPtr_getWorldBoundingSphere__SWIG_0(swigCPtr, this, derive), false);
  }

  public Sphere getWorldBoundingSphere() {
    return new Sphere(OgreJNI.ParticleSystemPtr_getWorldBoundingSphere__SWIG_1(swigCPtr, this), false);
  }

  public void setVisible(boolean visible) {
    OgreJNI.ParticleSystemPtr_setVisible(swigCPtr, this, visible);
  }

  public boolean getVisible() {
    return OgreJNI.ParticleSystemPtr_getVisible(swigCPtr, this);
  }

  public boolean isVisible() {
    return OgreJNI.ParticleSystemPtr_isVisible(swigCPtr, this);
  }

  public void setRenderingDistance(float dist) {
    OgreJNI.ParticleSystemPtr_setRenderingDistance(swigCPtr, this, dist);
  }

  public float getRenderingDistance() {
    return OgreJNI.ParticleSystemPtr_getRenderingDistance(swigCPtr, this);
  }

  public void setRenderingMinPixelSize(float pixelSize) {
    OgreJNI.ParticleSystemPtr_setRenderingMinPixelSize(swigCPtr, this, pixelSize);
  }

  public float getRenderingMinPixelSize() {
    return OgreJNI.ParticleSystemPtr_getRenderingMinPixelSize(swigCPtr, this);
  }

  public UserObjectBindings getUserObjectBindings() {
    return new UserObjectBindings(OgreJNI.ParticleSystemPtr_getUserObjectBindings__SWIG_0(swigCPtr, this), false);
  }

  public short getRenderQueueGroup() {
    return OgreJNI.ParticleSystemPtr_getRenderQueueGroup(swigCPtr, this);
  }

  public Affine3 _getParentNodeFullTransform() {
    return new Affine3(OgreJNI.ParticleSystemPtr__getParentNodeFullTransform(swigCPtr, this), false);
  }

  public void setQueryFlags(long flags) {
    OgreJNI.ParticleSystemPtr_setQueryFlags(swigCPtr, this, flags);
  }

  public void addQueryFlags(long flags) {
    OgreJNI.ParticleSystemPtr_addQueryFlags(swigCPtr, this, flags);
  }

  public void removeQueryFlags(long flags) {
    OgreJNI.ParticleSystemPtr_removeQueryFlags(swigCPtr, this, flags);
  }

  public long getQueryFlags() {
    return OgreJNI.ParticleSystemPtr_getQueryFlags(swigCPtr, this);
  }

  public void setDefaultQueryFlags(long flags) {
    OgreJNI.ParticleSystemPtr_setDefaultQueryFlags(swigCPtr, this, flags);
  }

  public long getDefaultQueryFlags() {
    return OgreJNI.ParticleSystemPtr_getDefaultQueryFlags(swigCPtr, this);
  }

  public void setVisibilityFlags(long flags) {
    OgreJNI.ParticleSystemPtr_setVisibilityFlags(swigCPtr, this, flags);
  }

  public void addVisibilityFlags(long flags) {
    OgreJNI.ParticleSystemPtr_addVisibilityFlags(swigCPtr, this, flags);
  }

  public void removeVisibilityFlags(long flags) {
    OgreJNI.ParticleSystemPtr_removeVisibilityFlags(swigCPtr, this, flags);
  }

  public long getVisibilityFlags() {
    return OgreJNI.ParticleSystemPtr_getVisibilityFlags(swigCPtr, this);
  }

  public void setDefaultVisibilityFlags(long flags) {
    OgreJNI.ParticleSystemPtr_setDefaultVisibilityFlags(swigCPtr, this, flags);
  }

  public long getDefaultVisibilityFlags() {
    return OgreJNI.ParticleSystemPtr_getDefaultVisibilityFlags(swigCPtr, this);
  }

  public void setListener(MovableObject.Listener listener) {
    OgreJNI.ParticleSystemPtr_setListener(swigCPtr, this, MovableObject.Listener.getCPtr(listener), listener);
  }

  public MovableObject.Listener getListener() {
    long cPtr = OgreJNI.ParticleSystemPtr_getListener(swigCPtr, this);
    return (cPtr == 0) ? null : new MovableObject.Listener(cPtr, false);
  }

  public SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t queryLights() {
    return new SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t(OgreJNI.ParticleSystemPtr_queryLights(swigCPtr, this), false);
  }

  public long getLightMask() {
    return OgreJNI.ParticleSystemPtr_getLightMask(swigCPtr, this);
  }

  public void setLightMask(long lightMask) {
    OgreJNI.ParticleSystemPtr_setLightMask(swigCPtr, this, lightMask);
  }

  public SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t _getLightList() {
    long cPtr = OgreJNI.ParticleSystemPtr__getLightList(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t(cPtr, false);
  }

  public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
    long cPtr = OgreJNI.ParticleSystemPtr_getEdgeList(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(ShadowTechnique shadowTechnique, Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, boolean extrudeVertices, float extrusionDist, long flags) {
    return new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgreJNI.ParticleSystemPtr_getShadowVolumeRenderableList__SWIG_0(swigCPtr, this, shadowTechnique.swigValue(), Light.getCPtr(light), light, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrudeVertices, extrusionDist, flags), false);
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(ShadowTechnique shadowTechnique, Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, boolean extrudeVertices, float extrusionDist) {
    return new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgreJNI.ParticleSystemPtr_getShadowVolumeRenderableList__SWIG_1(swigCPtr, this, shadowTechnique.swigValue(), Light.getCPtr(light), light, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrudeVertices, extrusionDist), false);
  }

  public AxisAlignedBox getLightCapBounds() {
    return new AxisAlignedBox(OgreJNI.ParticleSystemPtr_getLightCapBounds(swigCPtr, this), false);
  }

  public AxisAlignedBox getDarkCapBounds(Light light, float dirLightExtrusionDist) {
    return new AxisAlignedBox(OgreJNI.ParticleSystemPtr_getDarkCapBounds(swigCPtr, this, Light.getCPtr(light), light, dirLightExtrusionDist), false);
  }

  public void setCastShadows(boolean enabled) {
    OgreJNI.ParticleSystemPtr_setCastShadows(swigCPtr, this, enabled);
  }

  public boolean getCastShadows() {
    return OgreJNI.ParticleSystemPtr_getCastShadows(swigCPtr, this);
  }

  public boolean getReceivesShadows() {
    return OgreJNI.ParticleSystemPtr_getReceivesShadows(swigCPtr, this);
  }

  public float getPointExtrusionDistance(Light l) {
    return OgreJNI.ParticleSystemPtr_getPointExtrusionDistance(swigCPtr, this, Light.getCPtr(l), l);
  }

  public void setDebugDisplayEnabled(boolean enabled) {
    OgreJNI.ParticleSystemPtr_setDebugDisplayEnabled(swigCPtr, this, enabled);
  }

  public boolean isDebugDisplayEnabled() {
    return OgreJNI.ParticleSystemPtr_isDebugDisplayEnabled(swigCPtr, this);
  }

  public Entity castEntity() {
    long cPtr = OgreJNI.ParticleSystemPtr_castEntity(swigCPtr, this);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public boolean hasEdgeList() {
    return OgreJNI.ParticleSystemPtr_hasEdgeList(swigCPtr, this);
  }

  public void clearShadowRenderableList(SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t shadowRenderables) {
    OgreJNI.ParticleSystemPtr_clearShadowRenderableList(swigCPtr, this, SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t.getCPtr(shadowRenderables));
  }

  public void extrudeVertices(HardwareVertexBufferPtr vertexBuffer, long originalVertexCount, Vector4 lightPos, float extrudeDist) {
    OgreJNI.ParticleSystemPtr_extrudeVertices(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(vertexBuffer), vertexBuffer, originalVertexCount, Vector4.getCPtr(lightPos), lightPos, extrudeDist);
  }

}
