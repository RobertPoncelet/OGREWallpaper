/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.ogre;

public enum Capabilities {
  RSC_PRIMITIVE_RESTART(OgreJNI.RSC_PRIMITIVE_RESTART_get()),
  RSC_AUTOMIPMAP_COMPRESSED(OgreJNI.RSC_AUTOMIPMAP_COMPRESSED_get()),
  RSC_ANISOTROPY(OgreJNI.RSC_ANISOTROPY_get()),
  RSC_DOT3(OgreJNI.RSC_DOT3_get()),
  RSC_WIDE_LINES(OgreJNI.RSC_WIDE_LINES_get()),
  RSC_HWSTENCIL(OgreJNI.RSC_HWSTENCIL_get()),
  RSC_READ_WRITE_BUFFERS(OgreJNI.RSC_READ_WRITE_BUFFERS_get()),
  RSC_ATOMIC_COUNTERS(OgreJNI.RSC_ATOMIC_COUNTERS_get()),
  RSC_TEXTURE_COMPRESSION_ASTC(OgreJNI.RSC_TEXTURE_COMPRESSION_ASTC_get()),
  RSC_32BIT_INDEX(OgreJNI.RSC_32BIT_INDEX_get()),
  RSC_VERTEX_PROGRAM(OgreJNI.RSC_VERTEX_PROGRAM_get()),
  RSC_FRAGMENT_PROGRAM(OgreJNI.RSC_FRAGMENT_PROGRAM_get()),
  RSC_SCISSOR_TEST(OgreJNI.RSC_SCISSOR_TEST_get()),
  RSC_TWO_SIDED_STENCIL(OgreJNI.RSC_TWO_SIDED_STENCIL_get()),
  RSC_STENCIL_WRAP(OgreJNI.RSC_STENCIL_WRAP_get()),
  RSC_HWOCCLUSION(OgreJNI.RSC_HWOCCLUSION_get()),
  RSC_USER_CLIP_PLANES(OgreJNI.RSC_USER_CLIP_PLANES_get()),
  RSC_VERTEX_FORMAT_UBYTE4(OgreJNI.RSC_VERTEX_FORMAT_UBYTE4_get()),
  RSC_INFINITE_FAR_PLANE(OgreJNI.RSC_INFINITE_FAR_PLANE_get()),
  RSC_HWRENDER_TO_TEXTURE(OgreJNI.RSC_HWRENDER_TO_TEXTURE_get()),
  RSC_TEXTURE_FLOAT(OgreJNI.RSC_TEXTURE_FLOAT_get()),
  RSC_NON_POWER_OF_2_TEXTURES(OgreJNI.RSC_NON_POWER_OF_2_TEXTURES_get()),
  RSC_TEXTURE_3D(OgreJNI.RSC_TEXTURE_3D_get()),
  RSC_POINT_SPRITES(OgreJNI.RSC_POINT_SPRITES_get()),
  RSC_POINT_EXTENDED_PARAMETERS(OgreJNI.RSC_POINT_EXTENDED_PARAMETERS_get()),
  RSC_VERTEX_TEXTURE_FETCH(OgreJNI.RSC_VERTEX_TEXTURE_FETCH_get()),
  RSC_MIPMAP_LOD_BIAS(OgreJNI.RSC_MIPMAP_LOD_BIAS_get()),
  RSC_GEOMETRY_PROGRAM(OgreJNI.RSC_GEOMETRY_PROGRAM_get()),
  RSC_HWRENDER_TO_VERTEX_BUFFER(OgreJNI.RSC_HWRENDER_TO_VERTEX_BUFFER_get()),
  RSC_TEXTURE_COMPRESSION(OgreJNI.RSC_TEXTURE_COMPRESSION_get()),
  RSC_TEXTURE_COMPRESSION_DXT(OgreJNI.RSC_TEXTURE_COMPRESSION_DXT_get()),
  RSC_TEXTURE_COMPRESSION_VTC(OgreJNI.RSC_TEXTURE_COMPRESSION_VTC_get()),
  RSC_TEXTURE_COMPRESSION_PVRTC(OgreJNI.RSC_TEXTURE_COMPRESSION_PVRTC_get()),
  RSC_TEXTURE_COMPRESSION_ATC(OgreJNI.RSC_TEXTURE_COMPRESSION_ATC_get()),
  RSC_TEXTURE_COMPRESSION_ETC1(OgreJNI.RSC_TEXTURE_COMPRESSION_ETC1_get()),
  RSC_TEXTURE_COMPRESSION_ETC2(OgreJNI.RSC_TEXTURE_COMPRESSION_ETC2_get()),
  RSC_TEXTURE_COMPRESSION_BC4_BC5(OgreJNI.RSC_TEXTURE_COMPRESSION_BC4_BC5_get()),
  RSC_TEXTURE_COMPRESSION_BC6H_BC7(OgreJNI.RSC_TEXTURE_COMPRESSION_BC6H_BC7_get()),
  RSC_FIXED_FUNCTION(OgreJNI.RSC_FIXED_FUNCTION_get()),
  RSC_MRT_DIFFERENT_BIT_DEPTHS(OgreJNI.RSC_MRT_DIFFERENT_BIT_DEPTHS_get()),
  RSC_ALPHA_TO_COVERAGE(OgreJNI.RSC_ALPHA_TO_COVERAGE_get()),
  RSC_ADVANCED_BLEND_OPERATIONS(OgreJNI.RSC_ADVANCED_BLEND_OPERATIONS_get()),
  RSC_HW_GAMMA(OgreJNI.RSC_HW_GAMMA_get()),
  RSC_RTT_MAIN_DEPTHBUFFER_ATTACHABLE(OgreJNI.RSC_RTT_MAIN_DEPTHBUFFER_ATTACHABLE_get()),
  RSC_RTT_DEPTHBUFFER_RESOLUTION_LESSEQUAL(OgreJNI.RSC_RTT_DEPTHBUFFER_RESOLUTION_LESSEQUAL_get()),
  RSC_VERTEX_BUFFER_INSTANCE_DATA(OgreJNI.RSC_VERTEX_BUFFER_INSTANCE_DATA_get()),
  RSC_CAN_GET_COMPILED_SHADER_BUFFER(OgreJNI.RSC_CAN_GET_COMPILED_SHADER_BUFFER_get()),
  RSC_SHADER_SUBROUTINE(OgreJNI.RSC_SHADER_SUBROUTINE_get()),
  RSC_HWRENDER_TO_TEXTURE_3D(OgreJNI.RSC_HWRENDER_TO_TEXTURE_3D_get()),
  RSC_TEXTURE_1D(OgreJNI.RSC_TEXTURE_1D_get()),
  RSC_TESSELLATION_HULL_PROGRAM(OgreJNI.RSC_TESSELLATION_HULL_PROGRAM_get()),
  RSC_TESSELLATION_DOMAIN_PROGRAM(OgreJNI.RSC_TESSELLATION_DOMAIN_PROGRAM_get()),
  RSC_COMPUTE_PROGRAM(OgreJNI.RSC_COMPUTE_PROGRAM_get()),
  RSC_HWOCCLUSION_ASYNCHRONOUS(OgreJNI.RSC_HWOCCLUSION_ASYNCHRONOUS_get()),
  RSC_PERSTAGECONSTANT(OgreJNI.RSC_PERSTAGECONSTANT_get()),
  RSC_READ_BACK_AS_TEXTURE(OgreJNI.RSC_READ_BACK_AS_TEXTURE_get()),
  RSC_WBUFFER(OgreJNI.RSC_WBUFFER_get()),
  RSC_PBUFFER(OgreJNI.RSC_PBUFFER_get()),
  RSC_SEPARATE_SHADER_OBJECTS(OgreJNI.RSC_SEPARATE_SHADER_OBJECTS_get()),
  RSC_VAO(OgreJNI.RSC_VAO_get()),
  RSC_GLSL_SSO_REDECLARE(OgreJNI.RSC_GLSL_SSO_REDECLARE_get()),
  RSC_DEBUG(OgreJNI.RSC_DEBUG_get()),
  RSC_MAPBUFFER(OgreJNI.RSC_MAPBUFFER_get());

  public final int swigValue() {
    return swigValue;
  }

  public static Capabilities swigToEnum(int swigValue) {
    Capabilities[] swigValues = Capabilities.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (Capabilities swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + Capabilities.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private Capabilities() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private Capabilities(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private Capabilities(Capabilities swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

